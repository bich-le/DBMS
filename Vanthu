-- UPDATE TABLES --------------------------------------------------------------------------------------------------


-- Record a Transaction
              DELIMITER //
              CREATE PROCEDURE RecordTransaction(
                  IN p_transaction_id VARCHAR(18),
                  IN p_transaction_type_id VARCHAR(3),
                  IN p_account_id VARCHAR(17),
                  IN p_amount INT,
                  IN p_direction ENUM('Debit', 'Credit'),
                  IN p_related_account_id VARCHAR(17),
                  IN p_status ENUM('Successful', 'Failed')
              )
              BEGIN
                  INSERT INTO TRANSACTIONS (
                      transaction_id, transaction_type_id, customer_account_id,
                      amount, direction, related_customer_account_id,
                      transaction_status
                  )
                  VALUES (
                      p_transaction_id, p_transaction_type_id, p_account_id,
                      p_amount, p_direction, p_related_account_id,
                      p_status
                  );
              END //
              DELIMITER ;

-- Log System Activity 
              DELIMITER //
              CREATE PROCEDURE LogSystemActivity(
                  IN p_category_id INT,
                  IN p_time DATETIME,
                  IN p_emp_id VARCHAR(11),
                  IN p_device_id INT,
                  IN p_objective_id VARCHAR(20),
                  IN p_old_value VARCHAR(15),
                  IN p_new_value VARCHAR(15),
                  IN p_description TEXT,
                  IN p_status ENUM('Successful', 'Failed')
              )
              BEGIN
                  INSERT INTO SYSTEM_ACTIVITIES_HISTORY (
                      activity_category_id, activity_time, emp_id,
                      device_id, objective_id, old_value,
                      new_value, description, status
                  )
                  VALUES (
                      p_category_id, p_time, p_emp_id,
                      p_device_id, p_objective_id, p_old_value,
                      p_new_value, p_description, p_status
                  );
              END //
              DELIMITER ;

-- Update Interest_rate Table:
              DELIMITER //
              CREATE PROCEDURE UpdateInterestRate (
                  IN p_rate_id TINYINT,
                  IN p_val DECIMAL(5,3),
                  IN p_account_type_id INT,
                  IN p_min_balance INT,
                  IN p_max_balance INT,
                  IN p_term INT,
                  IN p_status ENUM('Active', 'Inactive')
              )
              BEGIN
                  IF p_min_balance < 0 OR p_max_balance < p_min_balance THEN
                      SIGNAL SQLSTATE '45000'
                      SET MESSAGE_TEXT = 'Invalid balance range';
                  END IF;
              
                  UPDATE INTEREST_RATE
                  SET interest_rate_val = p_val,
                      account_type_id = p_account_type_id,
                      min_balance = p_min_balance,
                      max_balance = p_max_balance,
                      term = p_term,
                      status = p_status
                  WHERE interest_rate_id = p_rate_id;
              END //
              DELIMITER ;

-- Update System_activity_category table:
              DELIMITER //
              CREATE PROCEDURE UpdateSystemActivityCategory (
                  IN p_activity_category_id INT,
                  IN p_activity_category_name VARCHAR(30),
                  IN p_description TEXT
              )
              BEGIN
                  -- Check if the ID exists
                  IF EXISTS (
                      SELECT 1 FROM SYSTEM_ACTIVITY_CATEGORIES WHERE activity_category_id = p_activity_category_id
                  ) THEN
                      -- Attempt to update
                      UPDATE SYSTEM_ACTIVITY_CATEGORIES
                      SET 
                          activity_category_name = p_activity_category_name,
                          description = p_description
                      WHERE activity_category_id = p_activity_category_id;
                  ELSE
                      SIGNAL SQLSTATE '45000'
                      SET MESSAGE_TEXT = 'Activity category ID does not exist.';
                  END IF;
              END //
              DELIMITER ;
-- TRIGGER ----------------------------------------------
-- Trigger cho Fraud Pattern: Transaction Amount Spike (Số tiền giao dịch bất thường)
-- Khi một giao dịch có số tiền vượt quá ba lần trung bình của số tiền giao dịch trong vòng 7 ngày qua cho cùng một tài khoản, trigger sẽ thêm vào bảng Suspicion.
DELIMITER $$

CREATE TRIGGER check_transaction_amount_spike
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    -- Kiểm tra xem số tiền giao dịch có vượt quá 3 lần số tiền trung bình trong 7 ngày qua không
    DECLARE avg_amount DECIMAL(10, 2);
    
    -- Lấy số tiền trung bình của các giao dịch trong vòng 7 ngày qua
    SELECT AVG(amount)
    INTO avg_amount
    FROM TRANSACTIONS
    WHERE customer_account_id = NEW.customer_account_id
    AND transaction_time > NOW() - INTERVAL 7 DAY;
    
    -- Nếu số tiền giao dịch vượt quá 3 lần số tiền trung bình, tạo bản ghi trong Suspicion
    IF NEW.amount > 3 * avg_amount THEN
        INSERT INTO SUSPICION (transaction_id, fraud_pattern_id, detected_time, severity_level, status)
        VALUES (NEW.transaction_id, 'FP001', NOW(), 'High', 'Unresolved');
    END IF;
END$$

DELIMITER ;

-- Trigger cho Fraud Pattern: High Frequency Transactions (Giao dịch có tần suất cao)
---Khi một tài khoản thực hiện hơn 5 giao dịch trong vòng 1 phút, trigger sẽ thêm vào bảng
DELIMITER $$

CREATE TRIGGER check_high_frequency_transactions
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    -- Đếm số giao dịch trong vòng 1 phút của tài khoản hiện tại
    DECLARE transaction_count INT;
    
    SELECT COUNT(*)
    INTO transaction_count
    FROM TRANSACTIONS
    WHERE customer_account_id = NEW.customer_account_id
    AND transaction_time BETWEEN NOW() - INTERVAL 1 MINUTE AND NOW();
    
    -- Nếu số giao dịch lớn hơn 5, tạo bản ghi trong Suspicion
    IF transaction_count > 5 THEN
        INSERT INTO SUSPICION (transaction_id, fraud_pattern_id, detected_time, severity_level, status)
        VALUES (NEW.transaction_id, 'FP002', NOW(), 'Medium', 'Unresolved');
    END IF;
END$$
DELIMITER ;

--Trigger cho Fraud Pattern: Dormant Account Activity (Hoạt động trên tài khoản không sử dụng)
---Nếu tài khoản không thực hiện giao dịch trong hơn 3 tháng và sau đó có giao dịch lớn từ 50.000.000 VND trở lên, trigger sẽ ghi nhận một nghi ngờ gian lận.
DELIMITER $$

CREATE TRIGGER check_dormant_account_activity
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    -- Kiểm tra xem tài khoản có hoạt động không trong hơn 3 tháng
    DECLARE last_transaction_date DATE;
    
    SELECT MAX(transaction_time)
    INTO last_transaction_date
    FROM TRANSACTIONS
    WHERE customer_account_id = NEW.customer_account_id;
    
    -- Nếu tài khoản không có giao dịch trong hơn 3 tháng và giao dịch hiện tại lớn hơn 50 triệu
    IF DATEDIFF(NOW(), last_transaction_date) > 90 AND NEW.amount >= 50000000 THEN
        INSERT INTO SUSPICION (transaction_id, fraud_pattern_id, detected_time, severity_level, status)
        VALUES (NEW.transaction_id, 'FP004', NOW(), 'High', 'Unresolved');
    END IF;
END$$

DELIMITER ;

--Mỗi 3 phút chạy 1 event.
--Nếu một tài khoản có 3 bản ghi trở lên trong SUSPICION, và không có suspicion_status là 'Resolved' hoặc 'Failed_positive', thì cập nhật cus_account_status = 'temporarily locked'.
DELIMITER $$

CREATE EVENT IF NOT EXISTS lock_suspicious_accounts
ON SCHEDULE EVERY 3 minute
DO
BEGIN
    UPDATE CUSTOMER_ACCOUNT
    SET cus_account_status = 'temporarily locked'
    WHERE cus_account_id IN (
        SELECT cus_account_id
        FROM SUSPICION
        WHERE suspicion_status NOT IN ('Resolved', 'Failed_positive')
          AND suspicion_time >= NOW() - INTERVAL 7 DAY
        GROUP BY cus_account_id
        HAVING COUNT(*) >= 3
    );
END$$

DELIMITER ;

-- Check nếu deposit_date ko ở trong tương lai---------------------------------------------------------
DELIMITER //
CREATE TRIGGER check_deposit_date
BEFORE INSERT ON FIXED_DEPOSIT_ACCOUNTS
FOR EACH ROW
BEGIN
    IF NEW.deposit_date > CURDATE() THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Deposit date cannot be in the future';
    END IF;
END//

CREATE TRIGGER check_deposit_date_update
BEFORE UPDATE ON FIXED_DEPOSIT_ACCOUNTS
FOR EACH ROW
BEGIN
    IF NEW.deposit_date > CURDATE() THEN
        SIGNAL SQLSTATE '45000' 
        SET MESSAGE_TEXT = 'Deposit date cannot be in the future';
    END IF;
END//
DELIMITER ;
CREATE TRIGGER validate_transaction_before_insert
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE v_account_status VARCHAR(20);
    DECLARE v_balance BIGINT;
    DECLARE v_daily_total DECIMAL(18,2);
    DECLARE v_daily_limit DECIMAL(18,2);
    DECLARE v_transaction_limit int;
    
    -- Check for same source and destination accounts
    IF NEW.trans_type_id = 'TRF' AND NEW.related_cus_account_id = NEW.cus_account_id THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'VAL-001';
        -- SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Cannot transfer to the same account';
    END IF;
    
    -- Check account status
    SELECT cus_account_status INTO v_account_status 
    FROM CUSTOMER_ACCOUNTS 
    WHERE cus_account_id = NEW.cus_account_id;
    
    IF v_account_status != 'Active' THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'ACC-001';
        -- SIGNAL SQLSTATE '45003' SET MESSAGE_TEXT = 'Account is not active';
    END IF;
    
    -- Check balance for Debit transactions
    IF NEW.direction = 'Debit' THEN
        SELECT 
            CASE 
                WHEN ca.cus_account_type_id = 'S' THEN sa.saving_acc_balance
                WHEN ca.cus_account_type_id = 'C' THEN ca2.check_acc_balance
                ELSE 0
            END INTO v_balance
        FROM CUSTOMER_ACCOUNTS ca
        LEFT JOIN SAVING_ACCOUNTS sa ON ca.cus_account_id = sa.cus_account_id
        LEFT JOIN CHECK_ACCOUNTS ca2 ON ca.cus_account_id = ca2.cus_account_id
        WHERE ca.cus_account_id = NEW.cus_account_id;
        
        IF v_balance < NEW.trans_amount THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'BAL-001';
            -- SIGNAL SQLSTATE '45004' SET MESSAGE_TEXT = 'Insufficient balance'; 
        END IF;
    END IF;
    
         -- Lấy giới hạn từng giao dịch
        SELECT transfer_limit INTO v_transaction_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF NEW.trans_amount > v_transaction_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-002';
        END IF;
    -- Kiểm tra hạn mức giao dịch trong ngày nếu là chuyển tiền Debit
    
    IF NEW.trans_type_id = 'TRF' AND NEW.direction = 'Debit' THEN
        -- Tổng số tiền đã chuyển trong ngày (chỉ tính giao dịch thành công)
        SELECT COALESCE(SUM(trans_amount), 0) INTO v_daily_total
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND DATE(trans_time) = DATE(NEW.trans_time)
        AND direction = 'Debit'
        AND trans_status = 'Successful';

        -- Lấy giới hạn ngày
        SELECT daily_transfer_limit INTO v_daily_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF (v_daily_total + NEW.trans_amount) > v_daily_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-001';
        END IF;


    END IF;
END;
//
DELIMITER ;

-- Trigger sau khi giao dịch thất bại
DELIMITER //
CREATE TRIGGER after_transaction_failed
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    IF NEW.trans_status = 'Failed' 
    THEN
        INSERT INTO FAILED_TRANSACTIONS (
            trans_id,
            cus_account_id,
            trans_error_code,
            trans_amount,
            failure_reason,
            attempted_time
        ) VALUES (
            NEW.trans_id,
            NEW.cus_account_id,
            NEW.trans_error_code,
            NEW.trans_amount,
            COALESCE((SELECT description FROM TRANSACTION_ERROR_CODES WHERE trans_error_code = NEW.trans_error_code), 'Unknown error'),
            NEW.trans_time
        );
    END IF;
END//
DELIMITER ;

DELIMITER $$
CREATE TRIGGER after_insert_customer_account
AFTER INSERT ON CUSTOMER_ACCOUNTS
FOR EACH ROW
BEGIN
    DECLARE matched_interest_id TINYINT;

    -- Trường hợp: CHECK ACCOUNT
    IF NEW.cus_account_type_id = 'C' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'C'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO CHECK_ACCOUNTS (cus_account_id, check_acc_balance, interest_rate_id, transfer_limit, daily_transfer_limit)
        VALUES (NEW.cus_account_id, 0, matched_interest_id, 10000000, 50000000);

    -- Trường hợp: SAVING ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'S' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'S'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO SAVING_ACCOUNTS (cus_account_id, saving_acc_balance, interest_rate_id)
        VALUES (NEW.cus_account_id, 0, matched_interest_id);

    -- Trường hợp: FIXED DEPOSIT ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'F' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'F'
          AND status = 'Active'
          AND term = 6
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO FIXED_DEPOSIT_ACCOUNTS (cus_account_id, interest_rate_id, deposit_date, maturity_date)
        VALUES (
            NEW.cus_account_id,
            matched_interest_id,
            CURRENT_DATE(),
            DATE_ADD(CURRENT_DATE(), INTERVAL 6 MONTH)
        );
    END IF;
END $$

DELIMITER ;
DELIMITER //

CREATE TRIGGER update_balances_after_transaction
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE account_type VARCHAR(2);
    
    -- Chỉ xử lý khi giao dịch thành công
    IF NEW.trans_status = 'Successful' THEN
        -- Lấy loại tài khoản
        SELECT cus_account_type_id INTO account_type
        FROM CUSTOMER_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;
        
        -- Xử lý trừ tiền từ tài khoản nguồn (Debit)
        IF NEW.direction = 'Debit' THEN
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            END IF;
        END IF;
        
        -- Xử lý cộng tiền vào tài khoản đích (nếu có và là Credit)
        -- IF NEW.related_cus_account_id IS NOT NULL AND NEW.direction = 'Credit' THEN
        IF NEW.related_cus_account_id IS NOT NULL THEN
            SELECT cus_account_type_id INTO account_type
            FROM CUSTOMER_ACCOUNTS
            WHERE cus_account_id = NEW.related_cus_account_id;
            
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            END IF;
        END IF;
    END IF;
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE calculate_interest_for_accounts()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE account_id VARCHAR(17);
    DECLARE acc_type VARCHAR(2);
    DECLARE balance BIGINT;
    DECLARE rate DECIMAL(5,3);
    DECLARE interest_amount DECIMAL(18,2);
    DECLARE term_months INT;
    
    -- Cursor cho tài khoản tiết kiệm (S)
    DECLARE saving_cursor CURSOR FOR 
        SELECT sa.cus_account_id, sa.saving_acc_balance, ir.interest_rate_val
        FROM SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON sa.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'S'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active';
    
    -- Cursor cho tài khoản tiền gửi có kỳ hạn (F)
    DECLARE fixed_cursor CURSOR FOR 
        SELECT fd.cus_account_id, fd.deposit_amount, ir.interest_rate_val, ir.term
        FROM FIXED_DEPOSIT_ACCOUNTS fd
        JOIN CUSTOMER_ACCOUNTS ca ON fd.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON fd.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'F'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active'
        AND fd.maturity_date <= CURDATE();
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Xử lý tài khoản tiết kiệm (hàng tháng)
    OPEN saving_cursor;
    saving_loop: LOOP
        FETCH saving_cursor INTO account_id, balance, rate;
        IF done THEN
            LEAVE saving_loop;
        END IF;
        
        -- Tính lãi hàng tháng (lãi suất năm chia 12)
        SET interest_amount = balance * (rate / 100 / 12);
        
        -- Cộng lãi vào tài khoản
        UPDATE SAVING_ACCOUNTS
        SET saving_acc_balance = saving_acc_balance + interest_amount
        WHERE cus_account_id = account_id;
        
        -- Ghi nhận giao dịch lãi
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('INT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'INT',
            account_id,
            interest_amount,
            'Credit',
            'Successful'
        );
    END LOOP;
    CLOSE saving_cursor;
    
    SET done = FALSE;
    
    -- Xử lý tài khoản tiền gửi có kỳ hạn (khi đáo hạn)
    OPEN fixed_cursor;
    fixed_loop: LOOP
        FETCH fixed_cursor INTO account_id, balance, rate, term_months;
        IF done THEN
            LEAVE fixed_loop;
        END IF;
        
        -- Tính lãi theo kỳ hạn
        SET interest_amount = balance * (rate / 100) * (term_months / 12);
        
        -- Cộng lãi và gốc vào tài khoản tiết kiệm (hoặc check account)
        -- Giả sử chuyển vào tài khoản tiết kiệm cùng khách hàng
        UPDATE SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = (
            SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
            WHERE cus_id = (
                SELECT cus_id FROM CUSTOMER_ACCOUNTS 
                WHERE cus_account_id = account_id
            )
            AND cus_account_type_id = 'S'
            LIMIT 1
        )
        SET sa.saving_acc_balance = sa.saving_acc_balance + balance + interest_amount;
        
        -- Ghi nhận giao dịch lãi và gốc
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            related_cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('MAT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'MAT',
            account_id,
            (SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
             WHERE cus_id = (SELECT cus_id FROM CUSTOMER_ACCOUNTS WHERE cus_account_id = account_id)
             AND cus_account_type_id = 'S' LIMIT 1),
            balance + interest_amount,
            'Credit',
            'Successful'
        );
        
        -- Đóng tài khoản tiền gửi có kỳ hạn
        DELETE FROM FIXED_DEPOSIT_ACCOUNTS WHERE cus_account_id = account_id;
        UPDATE CUSTOMER_ACCOUNTS SET cus_account_status = 'Locked' WHERE cus_account_id = account_id;
    END LOOP;
    CLOSE fixed_cursor;
END //

DELIMITER ;
-- Bật event scheduler nếu chưa bật
SET GLOBAL event_scheduler = ON;

-- Tạo event tính lãi tự động chạy vào 00:00 ngày đầu tháng
CREATE EVENT IF NOT EXISTS auto_calculate_interest
ON SCHEDULE 
    EVERY 1 MONTH
    STARTS TIMESTAMP(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01 00:00:00'))
DO
    CALL calculate_interest_for_accounts();
SET SQL_SAFE_UPDATES = 0;

CREATE TABLE IF NOT EXISTS DEBUG_LOG (
    id INT AUTO_INCREMENT PRIMARY KEY,
    msg TEXT,
    log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
SELECT * FROM DEBUG_LOG;
CREATE TABLE TEMP_SUSPICIONS (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    processed BOOLEAN DEFAULT FALSE,
    foreign key (trans_id) REFERENCES TRANSACTIONS(trans_id)
);
select * from suspicions;


CREATE TABLE IF NOT EXISTS EVENT_LOG (
    log_time DATETIME DEFAULT NOW(),
    message TEXT
);
select * from suspicions;
DELIMITER //
CREATE EVENT move_temp_to_suspicions
ON SCHEDULE EVERY 5 SECOND
DO
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Error in move_temp_to_suspicions at ', NOW()));
    END;
    
    START TRANSACTION;
    
    INSERT INTO SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
    SELECT trans_id, fraud_pattern_id, detected_time, severity_level
    FROM TEMP_SUSPICIONS
    WHERE processed = FALSE; -- Optional limit for large datasets
    
    UPDATE TEMP_SUSPICIONS
    SET processed = TRUE
    WHERE processed = FALSE
    AND trans_id IN (SELECT trans_id FROM SUSPICIONS WHERE detected_time >= DATE_SUB(NOW(), INTERVAL 1 MINUTE));
    
    INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Event ran at ', NOW()));
    
    COMMIT;
END//
DELIMITER ;
-- INSERT INTO SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
-- SELECT trans_id, fraud_pattern_id, detected_time, severity_level
-- FROM TEMP_SUSPICIONS
-- WHERE processed = FALSE
-- LIMIT 1000;
select * from suspicions;

-- Check if rows were inserted into SUSPICIONS
SELECT COUNT(*) FROM SUSPICIONS;

-- Check if TEMP_SUSPICIONS rows got marked as processed
SELECT COUNT(*) FROM TEMP_SUSPICIONS WHERE processed = FALSE;

SELECT * FROM EVENT_LOG ORDER BY log_time DESC;


DELIMITER //
CREATE TRIGGER detect_amount_spike
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE yearly_avg DECIMAL(20,2) DEFAULT 0;
    DECLARE pattern_id INT DEFAULT NULL;
    DECLARE recent_trans_count INT DEFAULT 0;
    DECLARE recent_trans_total DECIMAL(20,2) DEFAULT 0;

    -- Bắt đầu ghi log để debug
    INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Trigger fired for ', NEW.trans_id));

    IF NEW.trans_status = 'Successful' THEN

        SELECT fraud_pattern_id INTO pattern_id
        FROM FRAUD_PATTERNS
        WHERE fraud_pattern_name = 'Transaction Amount Spike'
        LIMIT 1;

        IF pattern_id IS NOT NULL THEN

            SELECT IFNULL(AVG(trans_amount), 0) INTO yearly_avg
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time >= DATE_SUB(NEW.trans_time, INTERVAL 1 YEAR);

            SELECT COUNT(*), IFNULL(SUM(trans_amount), 0)
            INTO recent_trans_count, recent_trans_total
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time BETWEEN DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE) AND NEW.trans_time;

            INSERT INTO DEBUG_LOG (msg) 
            VALUES (
                CONCAT('AVG=', yearly_avg, ', CNT=', recent_trans_count,  'TOTAL=', recent_trans_total, 'TRANS_TIME' , DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE))
            );

            IF yearly_avg > 0 AND recent_trans_count >= 5 AND recent_trans_total > (yearly_avg * 10) THEN
                INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
                VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');

                INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Suspicion inserted for ', NEW.trans_id));

            END IF;
        ELSE
            INSERT INTO DEBUG_LOG (msg) VALUES ('Pattern ID not found');
        END IF;
    ELSE
        INSERT INTO DEBUG_LOG (msg) VALUES ('Transaction not successful');
    END IF;
END//

DELIMITER ;


DELIMITER ;
-- Dormant acc activity trigger
DELIMITER //

CREATE TRIGGER detect_dormant_activity
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE last_trans_date DATETIME;
    DECLARE pattern_id INT;
    
    -- Chỉ kiểm tra giao dịch thành công >= 50,000,000
    IF NEW.trans_status = 'Successful' AND NEW.trans_amount >= 50000000 THEN
        -- Lấy ID mẫu gian lận
        SELECT fraud_pattern_id INTO pattern_id 
        FROM FRAUD_PATTERNS 
        WHERE fraud_pattern_name = 'Dormant Account Activity';
        
        -- Lấy ngày giao dịch cuối cùng
        SELECT MAX(trans_time) INTO last_trans_date
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND trans_id != NEW.trans_id
        AND trans_status = 'Successful';
        
        -- Kiểm tra tài khoản không hoạt động >3 tháng
        IF last_trans_date IS NOT NULL AND DATEDIFF(NEW.trans_time, last_trans_date) > 90 THEN
            -- Thêm vào bảng SUSPICIONS với severity_level tạm thời
            INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
            VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');
            
            -- Log thông tin vào DEBUG_LOG
            INSERT INTO DEBUG_LOG (msg) 
            VALUES (CONCAT('Suspicion detected for ', NEW.trans_id, ': Dormant Account Activity, Account: ', NEW.cus_account_id, ', Transaction Date: ', NEW.trans_time));
        END IF;
    END IF;
END//
DELIMITER ;

CREATE TABLE SUSPICIONS_PENDING_UPDATE (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    PRIMARY KEY (trans_id, fraud_pattern_id, detected_time)
);
-- *severity level update
DELIMITER //

CREATE TRIGGER update_severity_based_on_violations
AFTER INSERT ON SUSPICIONS
FOR EACH ROW
BEGIN
    DECLARE violation_count INT;
    DECLARE account_id VARCHAR(17);
    DECLARE new_severity ENUM('Low', 'Medium', 'High');

    -- Lấy account ID liên quan
    SELECT cus_account_id INTO account_id
    FROM TRANSACTIONS
    WHERE trans_id = NEW.trans_id;

    -- Đếm số lần vi phạm (không tính False_positive)
    SELECT COUNT(*) INTO violation_count
    FROM SUSPICIONS s
    JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
    WHERE t.cus_account_id = account_id
    AND s.suspicion_status != 'False_positive'
    AND s.fraud_pattern_id = NEW.fraud_pattern_id;

    -- Xác định mức độ nghiêm trọng
    SET new_severity = CASE
        WHEN violation_count >= 3 THEN 'High'
        WHEN violation_count = 2 THEN 'Medium'
        ELSE 'Low'
    END;

    -- Gửi dữ liệu cập nhật sang bảng trung gian
    INSERT INTO SUSPICIONS_PENDING_UPDATE (trans_id, fraud_pattern_id, detected_time, severity_level)
    VALUES (NEW.trans_id, NEW.fraud_pattern_id, NEW.detected_time, new_severity)
    ON DUPLICATE KEY UPDATE severity_level = VALUES(severity_level);

    -- Gọi thủ tục khóa tài khoản nếu cần
    CALL check_and_lock_account(account_id);
END//

DELIMITER ;
DELIMITER //

CREATE EVENT apply_pending_severity_updates
ON SCHEDULE EVERY 5 SECOND
DO
BEGIN
    START TRANSACTION;

    -- Áp dụng cập nhật mức độ nghiêm trọng
    UPDATE SUSPICIONS s
    JOIN SUSPICIONS_PENDING_UPDATE spu
    ON s.trans_id = spu.trans_id
       AND s.fraud_pattern_id = spu.fraud_pattern_id
       AND s.detected_time = spu.detected_time
    SET s.severity_level = spu.severity_level;

    -- Dọn bảng trung gian
    DELETE FROM SUSPICIONS_PENDING_UPDATE;

    COMMIT;
END//

DELIMITER ;
-- =====================================
########################################################
CREATE TABLE DEBUG_LOG_2 (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    log_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    account_id VARCHAR(17),
    current_status VARCHAR(20),
    high_severity_count INT,
    action_taken VARCHAR(100)
);


-- Lock account
DELIMITER //
CREATE PROCEDURE check_and_lock_account(IN p_account_id VARCHAR(17))
BEGIN
    DECLARE high_severity_count INT DEFAULT 0;
    DECLARE current_status VARCHAR(20);
    DECLARE action_msg VARCHAR(100);

    -- Lấy trạng thái hiện tại
    SELECT cus_account_status INTO current_status
    FROM CUSTOMER_ACCOUNTS
    WHERE cus_account_id = p_account_id;

    -- Mặc định chưa có hành động
    SET action_msg = 'No action taken';

    -- Chỉ xử lý nếu tài khoản chưa bị khóa
    IF current_status = 'Active' THEN
        -- Đếm số nghi ngờ High severity (không tính False_positive)
        SELECT COUNT(*) INTO high_severity_count
        FROM SUSPICIONS s
        JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
        WHERE t.cus_account_id = p_account_id
        AND s.suspicion_status != 'False_positive';

        -- Khóa tài khoản nếu có >=3 High severity
        IF high_severity_count >= 6 THEN
            UPDATE CUSTOMER_ACCOUNTS
            SET cus_account_status = 'Temporarily Locked'
            WHERE cus_account_id = p_account_id;

            SET action_msg = 'Account temporarily locked due to 3+ high severity suspicions';
        ELSE
            SET action_msg = 'Less than 3 high severity suspicions – no lock';
        END IF;
    ELSE
        SET action_msg = CONCAT('No action – status is ', current_status);
    END IF;

    -- Ghi log vào DEBUG_LOG_2
    INSERT INTO DEBUG_LOG_2 (account_id, current_status, high_severity_count, action_taken)
    VALUES (p_account_id, current_status, high_severity_count, action_msg);
END//
DELIMITER ;

SELECT * FROM customer_accounts;
