use dbms;
drop database PROJECT;
CREATE database PROJECT;
USE PROJECT;
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    address VARCHAR(100),
    phone_number VARCHAR(15),
    gender VARCHAR(10),
    customer_account_id int,
    identification_id VARCHAR(20),
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id)
);

CREATE TABLE IF NOT EXISTS BRANCH (
    branch_id INT AUTO_INCREMENT PRIMARY KEY,
    branch_name VARCHAR(100),
    branch_location VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS EMPLOYEES (
    emp_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_fullname VARCHAR(100),
    emp_gender ENUM('Male', 'Female', 'Other'),
    emp_dob DATE,
    emp_phone VARCHAR(15),
    emp_email VARCHAR(100),
    emp_address VARCHAR(255),
    emp_hire_date DATE,
    emp_salary DECIMAL(12, 2),
    branch_id INT,
    emp_position ENUM('Teller', 'Manager', 'Auditor', 'Director'),
    FOREIGN KEY (branch_id) REFERENCES BRANCH(branch_id)
);

CREATE TABLE IF NOT EXISTS EMPLOYEE_CUSTOMER (
    emp_id INT,
    customer_id int,
    role VARCHAR(50),
    assigned_date DATE,
    PRIMARY KEY (emp_id, customer_id),
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id),
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERS(customer_id)
);


CREATE TABLE INTEREST_RATE (
    rate_id INT PRIMARY KEY,
    rate_val DECIMAL(5,3) NOT NULL,
    account_type_id int,
    min_balance INT(10),
    max_balance INT(10),
    status ENUM('Active', 'Inactive') DEFAULT "Active",
    FOREIGN KEY (account_type_id) REFERENCES ACCOUNT_TYPE(account_type_id)
);


CREATE TABLE CUSTOMER_ACCOUNT (
    customer_account_id int auto_increment primary key,
    customer_id INT,                                    -- ID của khách hàng (liên kết với bảng USERS)                  -- Số dư tài khoản
    account_status ENUM('Active', 'Temporary Locked', 'Locked') DEFAULT 'Active',  -- Trạng thái tài khoản
    opening_date DATETIME DEFAULT CURRENT_TIMESTAMP, -- Ngày mở tài khoản                   -- Ngày giao dịch cuối cùng
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);
CREATE TABLE SAVING_ACCOUNT(
    customer_account_id INT primary key,
    rate_id int,
    saving_acc_balance int,
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id),
    FOREIGN KEY (rate_id) REFERENCES INTEREST_RATE(rate_id)
);

CREATE TABLE CURRENT_ACCOUNT(
    customer_account_id int primary key,
    current_acc_balance int,
    daily_transfer_limit decimal(10, 2),
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id),
);

CREATE TABLE FIXED_DEPOSIT_ACCOUNT(
    customer_account_id INT PRIMARY KEY,
    deposit_amount DECIMAL(12, 2) NOT NULL,
    deposit_date DATE NOT NULL,
    maturity_date DATE NOT NULL,
    rate_id INT,
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id),
    FOREIGN KEY (rate_id) REFERENCES INTEREST_RATE(rate_id)
);
CREATE TABLE TRANSACTION_TYPE(
    transaction_type_id TINYINT AUTO INCREMENT,
    transaction_type_name VARCHAR(20) NOT NULL,
    description TEXT
);
CREATE TABLE TRANSACTION (
    transaction_id CHAR(36) auto_increment PRIMARY KEY,
    customer_account_id INT(10) NOT NULL,
    amount INT(9) NOT NULL,
    transaction_type_id ,
    direction ENUM('Debit', 'Credit') NOT NULL,
    related_customer_account_id INT(10) ,
    transaction_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    transaction_status ENUM('Successful', 'Failed') NOT NULL,
	FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE CASCADE,
   	FOREIGN KEY (related_customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE SET NULL,
	FOREIGN KEY (transaction_type_id) REFERENCES TRANSACTION_TYPE_ID(transaction_type_id) ON DELETE SET NULL,
);

CREATE TABLE EMPLOYEE_ACCOUNT (
    emp_id INT PRIMARY KEY,                                      -- Foreign key to the employee table
    username VARCHAR(100) NOT NULL UNIQUE,                 -- Username for the account (must be unique)
    password_hash VARCHAR(255) NOT NULL,                   -- Hashed password (never store plaintext passwords)
    status ENUM('Active', 'Inactive', 'Suspended') DEFAULT 'Active',  -- Account status
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,         -- Timestamp when the account was created
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEE(emp_id) ON DELETE CASCADE  -- Foreign key to EMPLOYEE table
);
CREATE TABLE DEVICE_TYPE (
    device_type_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_name VARCHAR(50) NOT NULL UNIQUE,      -- Ví dụ: 'desktop', 'laptop', 'thin_client'
    is_portable BOOLEAN DEFAULT FALSE,          -- Có được mang ra ngoài không
    requires_approval BOOLEAN DEFAULT TRUE,     -- Có cần IT duyệt không
    description TEXT
);

CREATE TABLE DEVICE (
    device_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_id INT NOT NULL,                        
    device_name VARCHAR(100) NOT NULL,
    mac_address VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45),
    is_active BOOLEAN DEFAULT TRUE,
    is_approved BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_checked_at DATETIME,

    CONSTRAINT fk_employee_device FOREIGN KEY (employee_account_id) REFERENCES employee_account(employee_account_id),
    CONSTRAINT fk_type_device FOREIGN KEY (type_id) REFERENCES device_type(type_id)
);

CREATE TABLE SYSTEM_ACTIVITY_CATEGORIES (
    activity_category_id INT AUTO_INCREMENT PRIMARY KEY,           -- Unique identifier for each activity category
    activity_category_name VARCHAR(100) NOT NULL UNIQUE,           -- Name of the activity category (e.g., "Login", "Interest Change")
    description TEXT                                    -- Description of the category (optional)
);

CREATE TABLE SYSTEM_ACTIVITIES_HISTORY (
    activity_id INT AUTO_INCREMENT PRIMARY KEY,
    activity_category_id INT NOT NULL,
    activity_time DATETIME NOT NULL,
    employee_account_id INT ,
    device_id INT ,
    objective_id VARCHAR(20),
    old_value VARCHAR(15),
    new_value VARCHAR(15),
    description TEXT,
    status ENUM('Successful', 'Failed') NOT NULL,
    FOREIGN KEY (activity_category_id) REFERENCES SYSTEM_ACTIVITY_CATEGORIES(activity_category_id) ON DELETE CASCADE,
    FOREIGN KEY (employee_account_id) REFERENCES EMPLOYEE_ACCOUNT(employee_account_id) ON DELETE SET NULL,
    FOREIGN KEY (device_id) REFERENCES DEVICE(device_id) ON DELETE SET NULL
);


CREATE TABLE INTERNAL_LOGIN_HISTORY (
    employee_account_id INT,
    login_time DATETIME NOT NULL,
    logout_time DATETIME,
    ip_address VARCHAR(45),
    device_id INT,
    PRIMARY KEY (employee_account_id, device_id, login_time),
    status ENUM('Successful', 'Failed') NOT NULL,
    failure_reason TEXT,
    FOREIGN KEY (employee_account_id) REFERENCES EMPLOYEE_ACCOUNT(employee_account_id) ON DELETE SET NULL,
    FOREIGN KEY (device_id) REFERENCES DEVICE(device_id) ON DELETE SET NULL
);

CREATE TABLE CUS_ACCOUNT_CHANGE_HISTORY (
    customer_account_id INT,
    change_time DATETIME NOT NULL,
    field_change VARCHAR(100) NOT NULL,
    new_value TEXT,
    old_value TEXT,
	PRIMARY KEY ( customer_account_id, change_time),
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE CASCADE
);

CREATE TABLE FRAUD_PATTERN (
    fraud_pattern_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

CREATE TABLE SUSPICION (
    transaction_id CHAR(36) ,
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level VARCHAR(50) NOT NULL,
    status ENUM('Unresolved', 'Investigating', 'Resolved', 'False_positive') DEFAULT 'Unresolved',
    	PRIMARY KEY(transaction_id, fraud_pattern_id, detected_time),
	FOREIGN KEY (transaction_id) REFERENCES TRANSACTION(transaction_id) ON DELETE CASCADE,
	FOREIGN KEY (fraud_pattern_id) REFERENCES FRAUD_PATTERN(fraud_pattern_id) ON DELETE SET NULL
);
# Báo cáo
CREATE TABLE REPORT (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(100) NOT NULL,
    report_description TEXT,
    procedure_name VARCHAR(100) NOT NULL  -- Tên stored procedure được gọi để tạo báo cáo
);

CREATE TABLE REPORT_ACCESS (
    report_id INT,
    emp_position ENUM('D','M','T','A'),  -- Director, Manager, Teller, Auditor
    PRIMARY KEY (report_id, emp_position),
    FOREIGN KEY (report_id) REFERENCES REPORT(report_id)
);

CREATE TABLE REPORT_FILTER (
    report_id INT,
    filter_name VARCHAR(100),
    filter_type VARCHAR(50),
    is_required BOOLEAN,
    FOREIGN KEY (report_id) REFERENCES report(report_id)
);

#View employee_allowed_reports – Hiển thị các báo cáo mà nhân viên được truy cập
CREATE OR REPLACE VIEW employee_allowed_reports AS
SELECT 
    e.Emp_ID, 
    e.Emp_Position, 
    r.report_id, 
    r.report_name, 
    r.report_description,
    r.procedure_name
FROM Employees e
JOIN REPORT_ACCESS ra ON e.Emp_Position = ra.emp_position
JOIN REPORT r ON ra.report_id = r.report_id;







