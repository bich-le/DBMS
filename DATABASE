use dbms;
drop database PROJECT;
CREATE database PROJECT;
USE PROJECT;
CREATE TABLE IF NOT EXISTS Customers (
    Customer_ID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Address VARCHAR(100),
    PhoneNumber VARCHAR(15),
    Gender VARCHAR(10),
    Customer_account_id VARCHAR(20) UNIQUE,
    identification_id VARCHAR(20),
    
);

CREATE TABLE IF NOT EXISTS Branch (
    Branch_ID INT AUTO_INCREMENT PRIMARY KEY,
    Branch_Name VARCHAR(100),
    Branch_Location VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS Employees (
    Emp_ID INT AUTO_INCREMENT PRIMARY KEY,
    Emp_Fullname VARCHAR(100),
    Emp_Gender ENUM('Male', 'Female', 'Other'),
    Emp_DOB DATE,
    Emp_Phone VARCHAR(15),
    Emp_Email VARCHAR(100),
    Emp_Address VARCHAR(255),
    Emp_Hire_date DATE,
    Emp_Salary DECIMAL(12, 2),
    Branch_ID INT,
    Emp_Position ENUM('Teller', 'Manager', 'Auditor', 'Director'),
    FOREIGN KEY (Branch_ID) REFERENCES Branch(Branch_ID)
);

CREATE TABLE IF NOT EXISTS EmployeeCustomer (
    Emp_ID INT,
    Customer_ID INT,
    role VARCHAR(50),
    assigned_date DATE,
    PRIMARY KEY (Emp_ID, Customer_ID, assigned_date),
    FOREIGN KEY (Emp_ID) REFERENCES Employees(Emp_ID),
    FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE ACCOUNT_TYPE (
    account_type_id INT PRIMARY KEY,
    account_type_name VARCHAR(50)
);
CREATE TABLE INTEREST_RATE (
    rate_id INT PRIMARY KEY,
    rate_val DECIMAL(5,3) NOT NULL,
    account_type_id int,
    min_balance DECIMAL(12,2),
    max_balance DECIMAL(12,2),
    status ENUM('Active', 'Inactive') DEFAULT "Active",
    FOREIGN KEY (account_type_id) REFERENCES ACCOUNT_TYPE(account_type_id)
);


CREATE TABLE CUSTOMER_ACCOUNT (
    customer_account_id int auto_increment primary key,
    customer_id INT,                                    -- ID của khách hàng (liên kết với bảng USERS)
    account_type_id int NOT NULL,  
    account_balance DECIMAL(12, 2) NOT NULL,                  -- Số dư tài khoản
    account_status ENUM('Active', 'Inactive', 'Frozen') DEFAULT 'Active',  -- Trạng thái tài khoản
    opening_date DATETIME DEFAULT CURRENT_TIMESTAMP, -- Ngày mở tài khoản
    last_activity_date DATETIME,                     -- Ngày giao dịch cuối cùng
    transaction_limit DECIMAL(12, 2) NOT NULL,                    -- Giới hạn tài khoản (nếu có)
    interest_rate_id INT,
    FOREIGN KEY (customer_id) REFERENCES CUSTOMERs(customer_id),
    FOREIGN KEY (account_type_id) REFERENCES ACCOUNT_TYPE(account_type_id),
	FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATE(interest_rate_id)
);

CREATE TABLE TRANSACTION (
    transaction_id INT auto_increment PRIMARY KEY,
    customer_account_id INT(10) NOT NULL,
    amount INT(9) NOT NULL,
    transaction_type_id ENUM('POS', 'DEP', 'WDL', 'TRF', 'PMT', 'ACH', 'INT', 'FEE', 'CHK', 'REF') NOT NULL,
    direction ENUM('In', 'Out') NOT NULL,
    related_customer_account_id INT(10) NOT NULL,
    transaction_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    transaction_status ENUM('Successful', 'Failed') NOT NULL,
    mode_id ENUM('Online', 'Offline') NOT NULL,
	FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE CASCADE,
   	FOREIGN KEY (related_customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE CASCADE
);
CREATE TABLE EMPLOYEE (
    emp_id INT AUTO_INCREMENT PRIMARY KEY,      -- Unique identifier for each employee
    first_name VARCHAR(100) NOT NULL,                -- Employee's first name
    last_name VARCHAR(100) NOT NULL,                 -- Employee's last name
    job_title VARCHAR(100) NOT NULL,                 -- Job title of the employee
    department VARCHAR(100),                         -- Department the employee works in
    salary DECIMAL(10, 2),                           -- Employee's salary
    hire_date DATE NOT NULL,                         -- Date the employee was hired
    email VARCHAR(255) NOT NULL UNIQUE,              -- Employee's email (must be unique)
    phone_number VARCHAR(15),                        -- Employee's phone number
    address TEXT,                                    -- Employee's address
    account_status ENUM('Active', 'Inactive', 'Suspended') DEFAULT 'Active', -- Account status
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,   -- Account creation timestamp
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  -- Last update timestamp
);
CREATE TABLE EMPLOYEE_ACCOUNT (
    employee_account_id INT AUTO_INCREMENT PRIMARY KEY,            -- Unique identifier for the account
    emp_id INT NOT NULL,                                      -- Foreign key to the employee table
    username VARCHAR(100) NOT NULL UNIQUE,                 -- Username for the account (must be unique)
    password_hash VARCHAR(255) NOT NULL,                   -- Hashed password (never store plaintext passwords)
    status ENUM('Active', 'Inactive', 'Suspended') DEFAULT 'Active',  -- Account status
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,         -- Timestamp when the account was created
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEE(emp_id) ON DELETE CASCADE  -- Foreign key to EMPLOYEE table
);
CREATE TABLE DEVICE (
    device_id INT AUTO_INCREMENT PRIMARY KEY,          -- Unique identifier for the device
    employee_account_id INT NOT NULL,                                      -- Foreign key to the user (or employee) who owns the device
    device_type ENUM('Mobile', 'Tablet', 'Desktop', 'ATM', 'POS') NOT NULL,  -- Type of device
    device_name VARCHAR(100),                          -- Name or model of the device (e.g., "iPhone 12", "HP Laptop")
    device_ip VARCHAR(45) NOT NULL,                             -- IP address of the device (IPv4 or IPv6)
    last_used DATETIME,                                -- Last time the device was used to access the system
    is_active BOOLEAN DEFAULT TRUE,                    -- Whether the device is currently active
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,     -- Timestamp when the device record was created
    FOREIGN KEY (employee_account_id) REFERENCES EMPLOYEE_ACCOUNT(employee_account_id)   -- Foreign key to the USERS table
);
CREATE TABLE SYSTEM_ACTIVITY_CATEGORIES (
    activity_category_id INT AUTO_INCREMENT PRIMARY KEY,           -- Unique identifier for each activity category
    activity_category_name VARCHAR(100) NOT NULL UNIQUE,           -- Name of the activity category (e.g., "Login", "Interest Change")
    description TEXT                                    -- Description of the category (optional)
);

CREATE TABLE SYSTEM_ACTIVITIES_HISTORY (
    activity_id INT AUTO_INCREMENT PRIMARY KEY,
    activity_category_id INT NOT NULL,
    activity_time DATETIME NOT NULL,
    employee_account_id INT NOT NULL,
    device_id INT NOT NULL,
    objective_id VARCHAR(20),
    old_value VARCHAR(15),
    new_value VARCHAR(15),
    description TEXT,
    status ENUM('Successful', 'Failed') NOT NULL,
    FOREIGN KEY (activity_category_id) REFERENCES SYSTEM_ACTIVITY_CATEGORIES(activity_category_id) ON DELETE CASCADE,
    FOREIGN KEY (employee_account_id) REFERENCES EMPLOYEE_ACCOUNT(employee_account_id) ON DELETE CASCADE,
    FOREIGN KEY (device_id) REFERENCES DEVICE(device_id) ON DELETE CASCADE

);


CREATE TABLE INTERNAL_LOGIN_HISTORY (
    employee_account_id INT,
    login_time DATETIME NOT NULL,
    logout_time DATETIME,
    ip_address VARCHAR(45),
    device_id INT,
    PRIMARY KEY (employee_account_id, device_id, login_time),
    status ENUM('Successful', 'Failed') NOT NULL,
    FOREIGN KEY (employee_account_id) REFERENCES EMPLOYEE_ACCOUNT(employee_account_id) ON DELETE SET NULL,
    FOREIGN KEY (device_id) REFERENCES DEVICE(device_id) ON DELETE SET NULL
);

CREATE TABLE CUS_ACCOUNT_CHANGE_HISTORY (
    customer_account_id INT,
    change_time DATETIME NOT NULL,
    field_change VARCHAR(100) NOT NULL,
    new_value TEXT,
    old_value TEXT,
	PRIMARY KEY ( customer_account_id, change_time),
    FOREIGN KEY (customer_account_id) REFERENCES CUSTOMER_ACCOUNT(customer_account_id) ON DELETE CASCADE
);

CREATE TABLE FRAUD_PATTERN (
    fraud_pattern_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

CREATE TABLE SUSPICION (
    transaction_id INT PRIMARY KEY,
    fraud_pattern_id INT,
    detected_time DATETIME NOT NULL,
    location_info TEXT,
    severity_level VARCHAR(50) NOT NULL,
    status ENUM('Unresolved', 'Investigating', 'Resolved', 'False_positive') DEFAULT 'Unresolved',
    FOREIGN KEY (transaction_id) REFERENCES TRANSACTION(transaction_id) ON DELETE CASCADE,
	FOREIGN KEY (fraud_pattern_id) REFERENCES FRAUD_PATTERN(fraud_pattern_id) ON DELETE SET NULL
);







