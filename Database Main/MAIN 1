drop database main; 
create database main;
use main;
SET GLOBAL event_scheduler = ON;

					-- BANK INFORMATION -------------------------------------------
CREATE TABLE IF NOT EXISTS BRANCHES (
    branch_id VARCHAR(4) PRIMARY KEY, -- VD: HN, HCM
    branch_name VARCHAR(100),
    branch_address VARCHAR(255)
);




					-- CUSTOMER SYSTEM -----------------------------------
                    
                    
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    cus_ID VARCHAR(18) PRIMARY KEY,
    cus_first_name VARCHAR(50),
    cus_last_name VARCHAR(50),
    cus_dob DATE,
    cus_email VARCHAR(50) UNIQUE,
    cus_address VARCHAR(100),
    cus_phone_num VARCHAR(15) UNIQUE,
    cus_sex ENUM('Male', 'Female'),
    cus_identification_id VARCHAR(20) UNIQUE,
    cus_join_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    branch_id VARCHAR(4),
    FOREIGN KEY (branch_id) REFERENCES BRANCHES(branch_id) ON DELETE SET NULL
);
CREATE TABLE CUSTOMERS_INDEX (
    branch_id VARCHAR(4),
    year CHAR(2),
    current_index INT,
    PRIMARY KEY (branch_id, year)
);
CREATE TABLE IF NOT EXISTS CUSTOMER_ACCOUNT_TYPES (
    cus_account_type_id VARCHAR(2) PRIMARY KEY,
    cus_account_type_name VARCHAR(30) NOT NULL UNIQUE -- Chưa pull vào git
);
CREATE TABLE IF NOT EXISTS CUSTOMER_ACCOUNTS (
    cus_account_id VARCHAR(17) primary key, -- DTNB[customer_account_type_id][2-digit year][7-digit index]
    cus_id VARCHAR(17),
    cus_account_status ENUM('Active', 'Temporary Locked', 'Locked') DEFAULT 'Active', 
    opening_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    cus_account_type_id VARCHAR(2) ,
    
    FOREIGN KEY (cus_id) REFERENCES CUSTOMERS(cus_id) on delete cascade,
    FOREIGN KEY (cus_account_type_id) REFERENCES CUSTOMER_ACCOUNT_TYPES(cus_account_type_id) on delete set null
);
CREATE TABLE IF NOT EXISTS CUSTOMER_ACCOUNT_INDEX (
    cus_account_type_id VARCHAR(2),
    year CHAR(2),
    current_index INT DEFAULT 0,
    PRIMARY KEY (cus_account_type_id, year)
);
CREATE TABLE IF NOT EXISTS INTEREST_RATES (
    interest_rate_id TINYINT auto_increment PRIMARY KEY,
    interest_rate_val DECIMAL(5,3) NOT NULL 
		CHECK (interest_rate_val >0),
    cus_account_type_id VARCHAR(2) not null,
    min_balance INT(10) UNSIGNED,
    max_balance INT(10) UNSIGNED,
		CHECK (max_balance > min_balance) ,
    term INT(2),
    status ENUM('Active', 'Inactive') DEFAULT "Active",
	
    FOREIGN KEY (cus_account_type_id) REFERENCES CUSTOMER_ACCOUNT_TYPES(cus_account_type_id) on delete cascade
);
CREATE TABLE SAVING_ACCOUNTS(
    cus_account_id VARCHAR(17) primary key,
    interest_rate_id TINYint ,
    saving_acc_balance bigint unsigned not null,
    
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id),
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id)
);
CREATE TABLE CHECK_ACCOUNTS(
    cus_account_id VARCHAR(17) primary key,
    check_acc_balance bigint unsigned not null,
    interest_rate_id TINYint,
    transfer_limit int unsigned default 100000000
		CHECK (transfer_limit <= 100000000) ,
	daily_transfer_limit BIGint unsigned,
        
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id),
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id)
);
CREATE TABLE FIXED_DEPOSIT_ACCOUNTS(
    cus_account_id VARCHAR(17) PRIMARY KEY,
    interest_rate_id tinyint,
    deposit_amount bigint 
		CHECK (deposit_amount>1000),
    deposit_date DATE ,
    maturity_date DATE ,
		CHECK (maturity_date > deposit_date),
        
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE,
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id) ON DELETE SET NULL
);

DELIMITER $$

CREATE TRIGGER after_insert_customer_account
AFTER INSERT ON CUSTOMER_ACCOUNTS
FOR EACH ROW
BEGIN
    DECLARE matched_interest_id TINYINT;

    -- Trường hợp: CHECK ACCOUNT
    IF NEW.cus_account_type_id = 'C' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'C'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        -- INSERT INTO CHECK_ACCOUNTS (cus_account_id, check_acc_balance, interest_rate_id, transfer_limit, daily_transfer_limit)
        INSERT INTO CHECK_ACCOUNTS (cus_account_id, check_acc_balance, interest_rate_id)
        VALUES (NEW.cus_account_id, 0, matched_interest_id);

    -- Trường hợp: SAVING ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'S' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'S'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO SAVING_ACCOUNTS (cus_account_id, saving_acc_balance, interest_rate_id)
        VALUES (NEW.cus_account_id, 0, matched_interest_id);

    -- Trường hợp: FIXED DEPOSIT ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'F' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'F'
          AND status = 'Active'
          AND term = 6
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO FIXED_DEPOSIT_ACCOUNTS (cus_account_id, interest_rate_id, deposit_date, maturity_date)
        VALUES (
            NEW.cus_account_id,
            matched_interest_id,
            CURRENT_DATE(),
            DATE_ADD(CURRENT_DATE(), INTERVAL 6 MONTH)
        );
    END IF;
END $$

DELIMITER ;





					-- TRANSACTIONS SYSTEM --------------------------------------------
                    
CREATE TABLE TRANSACTION_TYPES(
    trans_type_id VARCHAR(3) PRIMARY KEY,
    trans_type_name VARCHAR(30) NOT NULL,
    description TEXT
);
-- Thêm các mã lỗi cơ bản có thể phát hiện bằng trigger
CREATE TABLE TRANSACTION_ERROR_CODES (
    trans_error_code VARCHAR(10) PRIMARY KEY,
    trans_error_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    can_retry BOOLEAN DEFAULT FALSE,
    needs_human_review BOOLEAN DEFAULT FALSE
);


CREATE TABLE TRANSACTIONS (
    trans_id VARCHAR(18) PRIMARY KEY, --  DTNB[transactin_type_id][2-digit year][7-digit index][day]
    trans_type_id varchar(3),
    cus_account_id VARCHAR(17) ,
	related_cus_account_id VARCHAR(17) ,
    trans_amount INT NOT NULL
		CHECK (trans_amount >= 1000),
	direction ENUM('Debit', 'Credit') NOT NULL,
    trans_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    trans_status enum("Failed", "Successful") DEFAULT 'Successful',
	trans_error_code VARCHAR(10),
    
	FOREIGN KEY (trans_error_code) REFERENCES TRANSACTION_ERROR_CODES(trans_error_code) ON DELETE SET NULL,
	FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE SET NULL,
   	FOREIGN KEY (related_cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE SET NULL,
	FOREIGN KEY (trans_type_id) REFERENCES TRANSACTION_TYPES(trans_type_id) ON DELETE SET NULL
	)	;

 CREATE TABLE FAILED_TRANSACTIONS (
    trans_id VARCHAR(18) PRIMARY KEY,
    cus_account_id VARCHAR(17),
    trans_error_code VARCHAR(10) NOT NULL,
    trans_amount INT unsigned NOT NULL,
    failure_reason TEXT NOT NULL,
    attempted_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (trans_error_code) REFERENCES TRANSACTION_ERROR_CODES(trans_error_code) ON DELETE CASCADE,
	FOREIGN KEY (trans_id) REFERENCES TRANSACTIONS(trans_id) ON DELETE CASCADE, 
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE
);
DELIMITER //

CREATE TRIGGER validate_transaction_before_insert
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE v_account_status VARCHAR(20);
    DECLARE v_balance BIGINT;
    DECLARE v_daily_total DECIMAL(18,2);
    DECLARE v_daily_limit DECIMAL(18,2);
    DECLARE v_transaction_limit int;
    
    -- Check for same source and destination accounts
    IF NEW.trans_type_id = 'TRF' AND NEW.related_cus_account_id = NEW.cus_account_id THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'VAL-001';
        -- SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Cannot transfer to the same account';
    END IF;
    
    -- Check account status
    SELECT cus_account_status INTO v_account_status 
    FROM CUSTOMER_ACCOUNTS 
    WHERE cus_account_id = NEW.cus_account_id;
    
    IF v_account_status != 'Active' THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'ACC-001';
        -- SIGNAL SQLSTATE '45003' SET MESSAGE_TEXT = 'Account is not active';
    END IF;
    
    -- Check balance for Debit transactions
    IF NEW.direction = 'Debit' THEN
        SELECT 
            CASE 
                WHEN ca.cus_account_type_id = 'S' THEN sa.saving_acc_balance
                WHEN ca.cus_account_type_id = 'C' THEN ca2.check_acc_balance
                ELSE 0
            END INTO v_balance
        FROM CUSTOMER_ACCOUNTS ca
        LEFT JOIN SAVING_ACCOUNTS sa ON ca.cus_account_id = sa.cus_account_id
        LEFT JOIN CHECK_ACCOUNTS ca2 ON ca.cus_account_id = ca2.cus_account_id
        WHERE ca.cus_account_id = NEW.cus_account_id;
        
        IF v_balance < NEW.trans_amount THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'BAL-001';
            -- SIGNAL SQLSTATE '45004' SET MESSAGE_TEXT = 'Insufficient balance'; 
        END IF;
    END IF;
    
         -- Lấy giới hạn từng giao dịch
        SELECT transfer_limit INTO v_transaction_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF NEW.trans_amount > v_transaction_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-002';
        END IF;
    -- Kiểm tra hạn mức giao dịch trong ngày nếu là chuyển tiền Debit
    
    IF NEW.trans_type_id = 'TRF' AND NEW.direction = 'Debit' THEN
        -- Tổng số tiền đã chuyển trong ngày (chỉ tính giao dịch thành công)
        SELECT COALESCE(SUM(trans_amount), 0) INTO v_daily_total
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND DATE(trans_time) = DATE(NEW.trans_time)
        AND direction = 'Debit'
        AND trans_status = 'Successful';

        -- Lấy giới hạn ngày
        SELECT daily_transfer_limit INTO v_daily_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF (v_daily_total + NEW.trans_amount) > v_daily_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-001';
        END IF;


    END IF;
END;
//
DELIMITER ;

-- Trigger sau khi giao dịch thất bại
DELIMITER //
CREATE TRIGGER after_transaction_failed
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    IF NEW.trans_status = 'Failed' 
    THEN
        INSERT INTO FAILED_TRANSACTIONS (
            trans_id,
            cus_account_id,
            trans_error_code,
            trans_amount,
            failure_reason,
            attempted_time
        ) VALUES (
            NEW.trans_id,
            NEW.cus_account_id,
            NEW.trans_error_code,
            NEW.trans_amount,
            COALESCE((SELECT description FROM TRANSACTION_ERROR_CODES WHERE trans_error_code = NEW.trans_error_code), 'Unknown error'),
            NEW.trans_time
        );
    END IF;
END//
DELIMITER ;

-- -------------------------------------------------------------------


					-- INTERNAL SYSTEM --------------------------------------------
                    
                    

CREATE TABLE IF NOT EXISTS EMPLOYEE_POSITIONS( -- TẠO BẢNG EMPLOYEE_POSITIONS
	emp_position_id VARCHAR(2) primary KEY, -- 'T', 'M', etc
    emp_position_name VARCHAR(15),
    description TEXT
);
CREATE TABLE IF NOT EXISTS EMPLOYEES (
    emp_id VARCHAR(11) PRIMARY KEY, -- [branch_id][position_id][2-digit year][4-digit index]
    emp_fullname VARCHAR(100) NOT NULL,
    emp_sex ENUM('Male', 'Female') NOT NULL,
    emp_dob DATE NOT NULL,
    emp_phone_num VARCHAR(15) UNIQUE NOT NULL, -- + [Mã quốc gia][Số còn lại] VD: +84 901238881
    emp_email VARCHAR(50) UNIQUE NOT NULL,
    emp_address VARCHAR(255) NOT NULL,
    emp_hire_date DATE NOT NULL,
    emp_salary INT(9) UNSIGNED NOT NULL,
    branch_id VARCHAR(4),
    emp_join_date DATETIME DEFAULT current_timestamp,
    emp_position_id VARCHAR(2),
    
    FOREIGN KEY (branch_id) REFERENCES BRANCHES(branch_id) ON DELETE CASCADE,
    FOREIGN KEY (emp_position_id) REFERENCES EMPLOYEE_POSITIONS(emp_position_id) ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS EMPLOYEE_ACCOUNT_INDEX (
	emp_position_id VARCHAR(2),
    branch_id VARCHAR(4),
    year CHAR(2),
    current_index INT DEFAULT 0,
    PRIMARY KEY (emp_position_id, branch_id, year)
);
CREATE TABLE IF NOT EXISTS SERVICE_TYPES (
    service_type_id VARCHAR(50) PRIMARY KEY,
    service_name VARCHAR(100) NOT NULL,
    description TEXT
);
CREATE TABLE IF NOT EXISTS EMPLOYEE_CUSTOMERS (
    emp_id VARCHAR(11),
    cus_id VARCHAR(17),
    service_type_id VARCHAR(50) NOT NULL,
    assigned_date DATE NOT NULL,
    
    PRIMARY KEY (emp_id, cus_id),
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE CASCADE,
    FOREIGN KEY (cus_id) REFERENCES CUSTOMERS(cus_id) ON DELETE CASCADE,
    FOREIGN KEY (service_type_id) REFERENCES SERVICE_TYPES(service_type_id) ON DELETE RESTRICT
);
CREATE TABLE EMPLOYEE_ACCOUNTS (
    emp_id VARCHAR(11) PRIMARY KEY,                                      
    username VARCHAR(100) NOT NULL UNIQUE,                 
    password_hash VARCHAR(255) NOT NULL,                   -- Hashed password (never store plaintext passwords)
    status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended') DEFAULT 'Active',
    suspension_time DATETIME NULL,
    reactivation_time DATETIME NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,         
    
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEEs(emp_id) ON DELETE CASCADE  
);
CREATE TABLE DEVICE_TYPES (
    device_type_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_name VARCHAR(50) NOT NULL UNIQUE,      -- Ví dụ: 'desktop', 'laptop', 'thin_client'
    is_portable BOOLEAN DEFAULT FALSE,          -- Có được mang ra ngoài không
    requires_approval BOOLEAN DEFAULT TRUE,     -- Có cần IT duyệt không
    description TEXT
);
CREATE TABLE DEVICES (
    device_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_id INT NOT NULL,                        
    device_name VARCHAR(100) NOT NULL,
    mac_address VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45),
    is_active BOOLEAN DEFAULT TRUE,
    is_approved BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_checked_at DATETIME,
    
    CONSTRAINT fk_type_device FOREIGN KEY (device_type_id) REFERENCES device_types(device_type_id)
);


							-- SYSTEM MANAGEMENT --------------------------------------------
                            
                            
CREATE TABLE SYSTEM_ACTIVITY_CATEGORIES (
    activity_category_id INT AUTO_INCREMENT PRIMARY KEY,      
    activity_category_name VARCHAR(30) unique,
    description TEXT                              
);
CREATE TABLE SYSTEM_ACTIVITIES_HISTORY (
    activity_id INT AUTO_INCREMENT PRIMARY KEY,
    activity_category_id INT NOT NULL,
    activity_time DATETIME NOT NULL,
    emp_id VARCHAR(11) ,
    device_id INT ,
    objective_id VARCHAR(20),
    old_value VARCHAR(15),
    new_value VARCHAR(15),
		CHECK (new_value != old_value),
    description TEXT,
    status ENUM('Successful', 'Failed') NOT NULL,
    
	FOREIGN KEY (activity_category_id) REFERENCES SYSTEM_ACTIVITY_CATEGORIES(activity_category_id) ON DELETE CASCADE,
	FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE SET NULL,
	FOREIGN KEY (device_id) REFERENCES DEVICES(device_id) ON DELETE SET NULL
);
CREATE TABLE INTERNAL_LOGIN_HISTORY (
    emp_id VARCHAR(11),
    login_time DATETIME NOT NULL,
    logout_time DATETIME,
    ip_address VARCHAR(45),
    device_id INT,
    PRIMARY KEY (emp_id, device_id, login_time),
    status ENUM('Successful', 'Failed') NOT NULL,
    failure_reason TEXT,
    
	FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE CASCADE,
	FOREIGN KEY (device_id) REFERENCES DEVICES(device_id) ON DELETE CASCADE
);
CREATE TABLE EMPLOYEE_ACCOUNTS_HISTORY (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_id VARCHAR(11) NOT NULL,
    old_status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended'),
    new_status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended') NOT NULL,
    change_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by VARCHAR(11),
    reason TEXT,
    
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEE_ACCOUNTS(emp_id) ON DELETE CASCADE
);
CREATE TABLE CUS_ACCOUNT_CHANGE_HISTORY (
    cus_account_id VARCHAR(17),
    change_time DATETIME NOT NULL,
    field_change VARCHAR(100) NOT NULL,
    new_value TEXT,
    old_value TEXT,
    
	PRIMARY KEY ( cus_account_id, change_time),
	FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE
);

CREATE TABLE FRAUD_PATTERNS (
    fraud_pattern_id INT auto_increment PRIMARY KEY,
    fraud_pattern_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);
CREATE TABLE SUSPICIONS (
    suspicion_id int auto_increment primary key,
    trans_id VARCHAR(18) ,
    fraud_pattern_id INT,
    detected_time DATETIME(6),
    severity_level enum('Low', 'Medium', 'High') ,
    suspicion_status ENUM('Unresolved', 'Investigating', 'Resolved', 'False_positive') DEFAULT 'Unresolved',
    
	FOREIGN KEY (trans_id) REFERENCES TRANSACTIONs(trans_id) ,
	FOREIGN KEY (fraud_pattern_id) REFERENCES FRAUD_PATTERNS(fraud_pattern_id) ON DELETE CASCADE
);


					-- REPORT --------------------------------------------
                    
                    
CREATE TABLE REPORT (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(100) NOT NULL UNIQUE,
    report_description TEXT
);
CREATE TABLE REPORT_ACCESS (
    report_id INT,
    emp_position ENUM('D','M','T','A'),  -- Director, Manager, Teller, Auditor
    PRIMARY KEY (report_id, emp_position),
    FOREIGN KEY (report_id) REFERENCES REPORT(report_id)
);
CREATE TABLE REPORT_FILTER (
    report_id INT,
    filter_name VARCHAR(100),
    filter_type VARCHAR(50),
    is_required BOOLEAN,
    FOREIGN KEY (report_id) REFERENCES report(report_id)
);
#View employee_allowed_reports – Hiển thị các báo cáo mà nhân viên được truy cập
-- CREATE OR REPLACE VIEW employee_allowed_reports AS
-- SELECT 
--     e.Emp_ID, 
--     e.Emp_Position, 
--     r.report_id, 
--     r.report_name, 
--     r.report_description,
--     r.procedure_name
-- FROM Employees e
-- JOIN REPORT_ACCESS ra ON e.Emp_Position = ra.emp_position
-- JOIN REPORT r ON ra.report_id = r.report_id;

-- Check nếu deposit_date ko ở trong tương lai---------------------------------------------------------
SET SQL_SAFE_UPDATES = 0;

CREATE TABLE IF NOT EXISTS DEBUG_LOG (
    id INT AUTO_INCREMENT PRIMARY KEY,
    msg TEXT,
    log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
SELECT * FROM DEBUG_LOG;
CREATE TABLE TEMP_SUSPICIONS (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    processed BOOLEAN DEFAULT FALSE,
    foreign key (trans_id) REFERENCES TRANSACTIONS(trans_id)
);
select * from suspicions;


CREATE TABLE IF NOT EXISTS EVENT_LOG (
    log_time DATETIME DEFAULT NOW(),
    message TEXT
);

DELIMITER //
CREATE EVENT move_temp_to_suspicions
ON SCHEDULE EVERY 2 SECOND
DO
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Error in move_temp_to_suspicions at ', NOW()));
    END;
    
    START TRANSACTION;
    
    INSERT INTO SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
    SELECT trans_id, fraud_pattern_id, detected_time, severity_level
    FROM TEMP_SUSPICIONS
    WHERE processed = FALSE; -- Optional limit for large datasets
    
    UPDATE TEMP_SUSPICIONS
    SET processed = TRUE
    WHERE processed = FALSE
    AND trans_id IN (SELECT trans_id FROM SUSPICIONS WHERE detected_time >= DATE_SUB(NOW(), INTERVAL 1 MINUTE));
    
    INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Event ran at ', NOW()));
    
    COMMIT;
END//
DELIMITER ;


DELIMITER //
CREATE TRIGGER detect_amount_spike
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE yearly_avg DECIMAL(20,2) DEFAULT 0;
    DECLARE pattern_id INT DEFAULT NULL;
    DECLARE recent_trans_count INT DEFAULT 0;
    DECLARE recent_trans_total DECIMAL(20,2) DEFAULT 0;

    -- Bắt đầu ghi log để debug
    INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Trigger fired for ', NEW.trans_id));

    IF NEW.trans_status = 'Successful' THEN

        SELECT fraud_pattern_id INTO pattern_id
        FROM FRAUD_PATTERNS
        WHERE fraud_pattern_name = 'Transaction Amount Spike'
        LIMIT 1;

        IF pattern_id IS NOT NULL THEN

            SELECT IFNULL(AVG(trans_amount), 0) INTO yearly_avg
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time >= DATE_SUB(NEW.trans_time, INTERVAL 1 YEAR);

            SELECT COUNT(*), IFNULL(SUM(trans_amount), 0)
            INTO recent_trans_count, recent_trans_total
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time BETWEEN DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE) AND NEW.trans_time;

            INSERT INTO DEBUG_LOG (msg) 
            VALUES (
                CONCAT('AVG=', yearly_avg, ', CNT=', recent_trans_count,  'TOTAL=', recent_trans_total, 'TRANS_TIME' , DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE))
            );

            IF yearly_avg > 0 AND recent_trans_count >= 5 AND recent_trans_total > (yearly_avg * 10) THEN
                INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
                VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');

                INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Suspicion inserted for ', NEW.trans_id));

            END IF;
        ELSE
            INSERT INTO DEBUG_LOG (msg) VALUES ('Pattern ID not found');
        END IF;
    ELSE
        INSERT INTO DEBUG_LOG (msg) VALUES ('Transaction not successful');
    END IF;
END//

DELIMITER ;


DELIMITER ;
-- Dormant acc activity trigger
DELIMITER //

CREATE TRIGGER detect_dormant_activity
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE last_trans_date DATETIME;
    DECLARE pattern_id INT;
    
    -- Chỉ kiểm tra giao dịch thành công >= 50,000,000
    IF NEW.trans_status = 'Successful' AND NEW.trans_amount >= 50000000 THEN
        -- Lấy ID mẫu gian lận
        SELECT fraud_pattern_id INTO pattern_id 
        FROM FRAUD_PATTERNS 
        WHERE fraud_pattern_name = 'Dormant Account Activity';
        
        -- Lấy ngày giao dịch cuối cùng
        SELECT MAX(trans_time) INTO last_trans_date
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND trans_id != NEW.trans_id
        AND trans_status = 'Successful';
        
        -- Kiểm tra tài khoản không hoạt động >3 tháng
        IF last_trans_date IS NOT NULL AND DATEDIFF(NEW.trans_time, last_trans_date) > 90 THEN
            -- Thêm vào bảng SUSPICIONS với severity_level tạm thời
            INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
            VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');
            
            -- Log thông tin vào DEBUG_LOG
            INSERT INTO DEBUG_LOG (msg) 
            VALUES (CONCAT('Suspicion detected for ', NEW.trans_id, ': Dormant Account Activity, Account: ', NEW.cus_account_id, ', Transaction Date: ', NEW.trans_time));
        END IF;
    END IF;
END//
DELIMITER ;

CREATE TABLE SUSPICIONS_PENDING_UPDATE (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    PRIMARY KEY (trans_id, fraud_pattern_id, detected_time)
);

-- *severity level update
DELIMITER //

CREATE TRIGGER update_severity_based_on_violations
AFTER INSERT ON SUSPICIONS
FOR EACH ROW
BEGIN
    DECLARE violation_count INT;
    DECLARE account_id VARCHAR(17);
    DECLARE new_severity ENUM('Low', 'Medium', 'High');

    -- Lấy account ID liên quan
    SELECT cus_account_id INTO account_id
    FROM TRANSACTIONS
    WHERE trans_id = NEW.trans_id;

    -- Đếm số lần vi phạm (không tính False_positive)
    SELECT COUNT(*) INTO violation_count
    FROM TEMP_SUSPICIONS s
    JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
    WHERE t.cus_account_id = account_id
    AND s.suspicion_status != 'False_positive'
    AND s.fraud_pattern_id = NEW.fraud_pattern_id;

    -- Xác định mức độ nghiêm trọng
    SET new_severity = CASE
        WHEN violation_count >= 3 THEN 'High'
        WHEN violation_count = 2 THEN 'Medium'
        ELSE 'Low'
    END;

    -- Gửi dữ liệu cập nhật sang bảng trung gian
    INSERT INTO SUSPICIONS_PENDING_UPDATE (trans_id, fraud_pattern_id, detected_time, severity_level)
    VALUES (NEW.trans_id, NEW.fraud_pattern_id, NEW.detected_time, new_severity)
    ON DUPLICATE KEY UPDATE severity_level = VALUES(severity_level);

    -- Gọi thủ tục khóa tài khoản nếu cần
    CALL check_and_lock_account(account_id);
END//
DELIMITER ;
select * from suspicions;

DELIMITER //
CREATE EVENT apply_pending_severity_updates
ON SCHEDULE EVERY 5 SECOND
DO
BEGIN
    START TRANSACTION;

    -- Áp dụng cập nhật mức độ nghiêm trọng
    UPDATE SUSPICIONS s
    JOIN SUSPICIONS_PENDING_UPDATE spu
    ON s.trans_id = spu.trans_id
       AND s.fraud_pattern_id = spu.fraud_pattern_id
       AND s.detected_time = spu.detected_time
    SET s.severity_level = spu.severity_level;

    -- Dọn bảng trung gian
    DELETE FROM SUSPICIONS_PENDING_UPDATE;

    COMMIT;
END//
DELIMITER ;
-- =====================================
########################################################
CREATE TABLE DEBUG_LOG_2 (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    log_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    account_id VARCHAR(17),
    current_status VARCHAR(20),
    high_severity_count INT,
    action_taken VARCHAR(100)
);

-- Lock account
DELIMITER //
CREATE PROCEDURE check_and_lock_account(IN p_account_id VARCHAR(17))
BEGIN
    DECLARE high_severity_count INT DEFAULT 0;
    DECLARE current_status VARCHAR(20);
    DECLARE action_msg VARCHAR(100);

    -- Lấy trạng thái hiện tại
    SELECT cus_account_status INTO current_status
    FROM CUSTOMER_ACCOUNTS
    WHERE cus_account_id = p_account_id;

    -- Mặc định chưa có hành động
    SET action_msg = 'No action taken';

    -- Chỉ xử lý nếu tài khoản chưa bị khóa
    IF current_status = 'Active' THEN
        -- Đếm số nghi ngờ High severity (không tính False_positive)
        SELECT COUNT(*) INTO high_severity_count
        FROM SUSPICIONS s
        JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
        WHERE t.cus_account_id = p_account_id
        AND s.severity_level = 'High'
        AND s.suspicion_status != 'False_positive';

        -- Khóa tài khoản nếu có >=3 High severity
        IF high_severity_count >= 3 THEN
            UPDATE CUSTOMER_ACCOUNTS
            SET cus_account_status = 'Temporary Locked'
            WHERE cus_account_id = p_account_id;

            SET action_msg = 'Account temporarily locked due to 3+ high severity suspicions';
        ELSE
            SET action_msg = 'Less than 3 high severity suspicions – no lock';
        END IF;
    ELSE
        SET action_msg = CONCAT('No action – status is ', current_status);
    END IF;

    -- Ghi log vào DEBUG_LOG_2
    INSERT INTO DEBUG_LOG_2 (account_id, current_status, high_severity_count, action_taken)
    VALUES (p_account_id, current_status, high_severity_count, action_msg);
END//
DELIMITER ;



-- -- -----------------------------------
CREATE OR REPLACE VIEW saving_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(saving_acc_balance, 0), ' VND') AS saving_acc_balance
FROM SAVING_ACCOUNTS;

CREATE OR REPLACE VIEW check_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(check_acc_balance, 0), ' VND') AS check_acc_balance,
  CONCAT(FORMAT(transfer_limit, 0), ' VND') AS transfer_limit,
  CONCAT(FORMAT(daily_transfer_limit, 0), ' VND') AS daily_transfer_limit
FROM CHECK_ACCOUNTS;

CREATE OR REPLACE VIEW fixed_deposit_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(deposit_amount, 0), ' VND') AS deposit_amount,
  deposit_date,
  maturity_date
FROM FIXED_DEPOSIT_ACCOUNTS;
CREATE OR REPLACE VIEW customer_accounts_view AS
SELECT 
  cus_account_id,
  cus_id,
  cus_account_status,
  DATE_FORMAT(opening_date, '%d-%m-%Y %H:%i:%s') AS formatted_opening_date,
  cus_account_type_id
FROM CUSTOMER_ACCOUNTS;

DELIMITER //

CREATE TRIGGER update_balances_after_transaction
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE account_type VARCHAR(2);
    
    -- Chỉ xử lý khi giao dịch thành công
    IF NEW.trans_status = 'Successful' THEN
        -- Lấy loại tài khoản
        SELECT cus_account_type_id INTO account_type
        FROM CUSTOMER_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;
        
        -- Xử lý trừ tiền từ tài khoản nguồn (Debit)
        IF NEW.direction = 'Debit' THEN
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            END IF;
        END IF;
        
        -- Xử lý cộng tiền vào tài khoản đích (nếu có và là Credit)
        -- IF NEW.related_cus_account_id IS NOT NULL AND NEW.direction = 'Credit' THEN
        IF NEW.related_cus_account_id IS NOT NULL THEN
            SELECT cus_account_type_id INTO account_type
            FROM CUSTOMER_ACCOUNTS
            WHERE cus_account_id = NEW.related_cus_account_id;
            
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            END IF;
        END IF;
    END IF;
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE calculate_interest_for_accounts()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE account_id VARCHAR(17);
    DECLARE acc_type VARCHAR(2);
    DECLARE balance BIGINT;
    DECLARE rate DECIMAL(5,3);
    DECLARE interest_amount DECIMAL(18,2);
    DECLARE term_months INT;
    
    -- Cursor cho tài khoản tiết kiệm (S)
    DECLARE saving_cursor CURSOR FOR 
        SELECT sa.cus_account_id, sa.saving_acc_balance, ir.interest_rate_val
        FROM SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON sa.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'S'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active';
    
    -- Cursor cho tài khoản tiền gửi có kỳ hạn (F)
    DECLARE fixed_cursor CURSOR FOR 
        SELECT fd.cus_account_id, fd.deposit_amount, ir.interest_rate_val, ir.term
        FROM FIXED_DEPOSIT_ACCOUNTS fd
        JOIN CUSTOMER_ACCOUNTS ca ON fd.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON fd.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'F'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active'
        AND fd.maturity_date <= CURDATE();
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Xử lý tài khoản tiết kiệm (hàng tháng)
    OPEN saving_cursor;
    saving_loop: LOOP
        FETCH saving_cursor INTO account_id, balance, rate;
        IF done THEN
            LEAVE saving_loop;
        END IF;
        
        -- Tính lãi hàng tháng (lãi suất năm chia 12)
        SET interest_amount = balance * (rate / 100 / 12);
        
        -- Cộng lãi vào tài khoản
        UPDATE SAVING_ACCOUNTS
        SET saving_acc_balance = saving_acc_balance + interest_amount
        WHERE cus_account_id = account_id;
        
        -- Ghi nhận giao dịch lãi
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('INT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'INT',
            account_id,
            interest_amount,
            'Credit',
            'Successful'
        );
    END LOOP;
    CLOSE saving_cursor;
    
    SET done = FALSE;
    
    -- Xử lý tài khoản tiền gửi có kỳ hạn (khi đáo hạn)
    OPEN fixed_cursor;
    fixed_loop: LOOP
        FETCH fixed_cursor INTO account_id, balance, rate, term_months;
        IF done THEN
            LEAVE fixed_loop;
        END IF;
        
        -- Tính lãi theo kỳ hạn
        SET interest_amount = balance * (rate / 100) * (term_months / 12);
        
        -- Cộng lãi và gốc vào tài khoản tiết kiệm (hoặc check account)
        -- Giả sử chuyển vào tài khoản tiết kiệm cùng khách hàng
        UPDATE SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = (
            SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
            WHERE cus_id = (
                SELECT cus_id FROM CUSTOMER_ACCOUNTS 
                WHERE cus_account_id = account_id
            )
            AND cus_account_type_id = 'S'
            LIMIT 1
        )
        SET sa.saving_acc_balance = sa.saving_acc_balance + balance + interest_amount;
        
        -- Ghi nhận giao dịch lãi và gốc
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            related_cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('MAT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'MAT',
            account_id,
            (SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
             WHERE cus_id = (SELECT cus_id FROM CUSTOMER_ACCOUNTS WHERE cus_account_id = account_id)
             AND cus_account_type_id = 'S' LIMIT 1),
            balance + interest_amount,
            'Credit',
            'Successful'
        );
        
        -- Đóng tài khoản tiền gửi có kỳ hạn
        DELETE FROM FIXED_DEPOSIT_ACCOUNTS WHERE cus_account_id = account_id;
        UPDATE CUSTOMER_ACCOUNTS SET cus_account_status = 'Locked' WHERE cus_account_id = account_id;
    END LOOP;
    CLOSE fixed_cursor;
END //

DELIMITER ;
-- Bật event scheduler nếu chưa bật
SET GLOBAL event_scheduler = ON;

-- Tạo event tính lãi tự động chạy vào 00:00 ngày đầu tháng
CREATE EVENT IF NOT EXISTS auto_calculate_interest
ON SCHEDULE 
    EVERY 1 MONTH
    STARTS TIMESTAMP(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01 00:00:00'))
DO
    CALL calculate_interest_for_accounts();
###################################################################################################
DELIMITER $$

CREATE TRIGGER trg_generate_customer_id
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW
BEGIN
    DECLARE idx INT;
    DECLARE yy CHAR(2);

    -- Use cus_join_date year if given, otherwise use current date
    SET yy = DATE_FORMAT(IFNULL(NEW.cus_join_date, CURRENT_TIMESTAMP), '%y');

    -- Increase or initialize the index for (branch_id, year)
    INSERT INTO CUSTOMERS_INDEX(branch_id, year, current_index)
    VALUES (NEW.branch_id, yy, 1)
    ON DUPLICATE KEY UPDATE current_index = current_index + 1;

    -- Get the updated index
    SELECT current_index INTO idx
    FROM CUSTOMERS_INDEX
    WHERE branch_id = NEW.branch_id AND year = yy;

    -- Set the new customer ID
    SET NEW.cus_ID = CONCAT('DTNB', NEW.branch_id, yy, LPAD(idx, 7, '0'));
END$$

DELIMITER ;

DELIMITER $$

CREATE TRIGGER trg_generate_customer_account_id
BEFORE INSERT ON CUSTOMER_ACCOUNTS
FOR EACH ROW
BEGIN
    DECLARE idx INT;
    DECLARE yy CHAR(2);

    -- Ưu tiên opening_date nếu có, không thì lấy CURRENT_DATE
    SET yy = IFNULL(DATE_FORMAT(NEW.opening_date, '%y'), DATE_FORMAT(CURRENT_DATE, '%y'));

    INSERT INTO CUSTOMER_ACCOUNT_INDEX(cus_account_type_id, year, current_index)
    VALUES (NEW.cus_account_type_id, yy, 1)
    ON DUPLICATE KEY UPDATE current_index = current_index + 1;

    -- Lấy chỉ số mới
    SELECT current_index INTO idx
    FROM CUSTOMER_ACCOUNT_INDEX
    WHERE cus_account_type_id = NEW.cus_account_type_id AND year = yy;

    -- Tạo mã tài khoản: DTNB + Loại + Năm + Số thứ tự
    SET NEW.cus_account_id = CONCAT('DTNB', NEW.cus_account_type_id, yy, LPAD(idx, 7, '0'));
END$$

DELIMITER ;
DELIMITER $$
CREATE TRIGGER trg_generate_emp_id
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    DECLARE idx INT;
    DECLARE yy CHAR(2);
	SET yy = IFNULL(DATE_FORMAT(NEW.emp_join_date, '%y'), DATE_FORMAT(CURRENT_DATE, '%y'));
    
    INSERT INTO EMPLOYEE_ACCOUNT_INDEX ( branch_id, emp_position_id, year, current_index)
    VALUES (NEW.branch_id, NEW.emp_position_id, yy, 1)
    ON DUPLICATE KEY UPDATE current_index = current_index + 1;

    -- Lấy chỉ số mới sau khi cập nhật
    SELECT current_index INTO idx
    FROM EMPLOYEE_ACCOUNT_INDEX
    WHERE branch_id = NEW.branch_id AND emp_position_id = NEW.emp_position_id AND year = yy;

    -- Tạo customer_ID
    SET NEW.emp_id = CONCAT(NEW.branch_id, NEW.emp_position_id,  yy, LPAD(idx, 4, '0'));
END$$

DELIMITER ;
DELIMITER $$
CREATE TRIGGER trg_generate_trans_id
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE idx INT;
    DECLARE yy CHAR(2);
    SET yy = IFNULL(DATE_FORMAT(NEW.trans_time, '%y'), DATE_FORMAT(CURRENT_DATE, '%y'));

    -- Tăng chỉ số cho branch + year hoặc thêm mới
    INSERT INTO TRANSACTION_INDEX (trans_type_id, year_suffix, current_index)
    VALUES (NEW.trans_type_id, yy, 1)
    ON DUPLICATE KEY UPDATE current_index = current_index + 1;

    -- Lấy chỉ số mới sau khi cập nhật
    SELECT current_index INTO idx
    FROM TRANSACTION_INDEX
    WHERE trans_type_id= NEW.trans_type_id AND year_suffix = yy;

    -- Tạo customer_ID
    SET NEW.trans_id = CONCAT('DTNB', NEW.trans_type_id, yy, LPAD(idx, 7, '0'));
END$$

DELIMITER ;
