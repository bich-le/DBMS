drop database main; 
create database main;
use main;
SET GLOBAL event_scheduler = ON;

					-- BANK INFORMATION -------------------------------------------
CREATE TABLE IF NOT EXISTS BRANCHES (
    branch_id VARCHAR(4) PRIMARY KEY, -- VD: HN, HCM
    branch_name VARCHAR(100),
    branch_address VARCHAR(255)
);




					-- CUSTOMER SYSTEM -----------------------------------
                    
                    
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    cus_ID VARCHAR(18) PRIMARY KEY,
    cus_first_name VARCHAR(50),
    cus_last_name VARCHAR(50),
    cus_dob DATE,
    cus_email VARCHAR(50) UNIQUE,
    cus_address VARCHAR(100),
    cus_phone_num VARCHAR(15) UNIQUE,
    cus_sex ENUM('Male', 'Female'),
    cus_identification_id VARCHAR(20) UNIQUE,
    branch_id VARCHAR(4),
    FOREIGN KEY (branch_id) REFERENCES BRANCHES(branch_id) ON DELETE SET NULL
);
CREATE TABLE CUSTOMERS_INDEX (
    branch_id VARCHAR(4),
    year CHAR(2),
    current_index INT,
    PRIMARY KEY (branch_id, year)
);
CREATE TABLE IF NOT EXISTS CUSTOMER_ACCOUNT_TYPES (
    cus_account_type_id VARCHAR(2) PRIMARY KEY,
    cus_account_type_name VARCHAR(30) NOT NULL UNIQUE -- Chưa pull vào git
);
CREATE TABLE IF NOT EXISTS CUSTOMER_ACCOUNTS (
    cus_account_id VARCHAR(17) primary key, -- DTNB[customer_account_type_id][2-digit year][7-digit index]
    cus_id VARCHAR(17),
    cus_account_status ENUM('Active', 'Temporarily Locked', 'Locked') DEFAULT 'Active', 
    opening_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    cus_account_type_id VARCHAR(2) ,
    
    FOREIGN KEY (cus_id) REFERENCES CUSTOMERS(cus_id) on delete cascade,
    FOREIGN KEY (cus_account_type_id) REFERENCES CUSTOMER_ACCOUNT_TYPES(cus_account_type_id) on delete set null
);

CREATE TABLE IF NOT EXISTS INTEREST_RATES (
    interest_rate_id TINYINT auto_increment PRIMARY KEY,
    interest_rate_val DECIMAL(5,3) NOT NULL 
		CHECK (interest_rate_val >0),
    cus_account_type_id VARCHAR(2) not null,
    min_balance INT(10) UNSIGNED,
    max_balance INT(10) UNSIGNED,
		CHECK (max_balance > min_balance) ,
    term INT(2),
    status ENUM('Active', 'Inactive') DEFAULT "Active",
	
    FOREIGN KEY (cus_account_type_id) REFERENCES CUSTOMER_ACCOUNT_TYPES(cus_account_type_id) on delete cascade
);
CREATE TABLE SAVING_ACCOUNTS(
    cus_account_id VARCHAR(17) primary key,
    interest_rate_id TINYint ,
    saving_acc_balance bigint unsigned not null,
    
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id),
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id)
);
CREATE TABLE CHECK_ACCOUNTS(
    cus_account_id VARCHAR(17) primary key,
    check_acc_balance bigint unsigned not null,
    interest_rate_id TINYint,
    transfer_limit int unsigned default 100000000
		CHECK (transfer_limit <= 100000000) ,
	daily_transfer_limit BIGint unsigned,
        
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id),
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id)
);
CREATE TABLE FIXED_DEPOSIT_ACCOUNTS(
    cus_account_id VARCHAR(17) PRIMARY KEY,
    interest_rate_id tinyint,
    deposit_amount bigint 
		CHECK (deposit_amount>1000),
    deposit_date DATE ,
    maturity_date DATE ,
		CHECK (maturity_date > deposit_date),
        
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE,
    FOREIGN KEY (interest_rate_id) REFERENCES INTEREST_RATES(interest_rate_id) ON DELETE SET NULL
);

DELIMITER $$

CREATE TRIGGER after_insert_customer_account
AFTER INSERT ON CUSTOMER_ACCOUNTS
FOR EACH ROW
BEGIN
    DECLARE matched_interest_id TINYINT;

    -- Trường hợp: CHECK ACCOUNT
    IF NEW.cus_account_type_id = 'C' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'C'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        -- INSERT INTO CHECK_ACCOUNTS (cus_account_id, check_acc_balance, interest_rate_id, transfer_limit, daily_transfer_limit)
        INSERT INTO CHECK_ACCOUNTS (cus_account_id, check_acc_balance, interest_rate_id)
        VALUES (NEW.cus_account_id, 0, matched_interest_id);

    -- Trường hợp: SAVING ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'S' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'S'
          AND status = 'Active'
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO SAVING_ACCOUNTS (cus_account_id, saving_acc_balance, interest_rate_id)
        VALUES (NEW.cus_account_id, 0, matched_interest_id);

    -- Trường hợp: FIXED DEPOSIT ACCOUNT
    ELSEIF NEW.cus_account_type_id = 'F' THEN
        SELECT interest_rate_id INTO matched_interest_id
        FROM INTEREST_RATES
        WHERE cus_account_type_id = 'F'
          AND status = 'Active'
          AND term = 6
        ORDER BY interest_rate_val DESC
        LIMIT 1;

        INSERT INTO FIXED_DEPOSIT_ACCOUNTS (cus_account_id, interest_rate_id, deposit_date, maturity_date)
        VALUES (
            NEW.cus_account_id,
            matched_interest_id,
            CURRENT_DATE(),
            DATE_ADD(CURRENT_DATE(), INTERVAL 6 MONTH)
        );
    END IF;
END $$

DELIMITER ;





					-- TRANSACTIONS SYSTEM --------------------------------------------
                    
CREATE TABLE TRANSACTION_TYPES(
    trans_type_id VARCHAR(3) PRIMARY KEY,
    trans_type_name VARCHAR(30) NOT NULL,
    description TEXT
);
-- Thêm các mã lỗi cơ bản có thể phát hiện bằng trigger
CREATE TABLE TRANSACTION_ERROR_CODES (
    trans_error_code VARCHAR(10) PRIMARY KEY,
    trans_error_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    can_retry BOOLEAN DEFAULT FALSE,
    needs_human_review BOOLEAN DEFAULT FALSE
);


CREATE TABLE TRANSACTIONS (
    trans_id VARCHAR(18) PRIMARY KEY, --  DTNB[transactin_type_id][2-digit year][7-digit index][day]
    trans_type_id varchar(3),
    cus_account_id VARCHAR(17) ,
	related_cus_account_id VARCHAR(17) ,
    trans_amount INT NOT NULL
		CHECK (trans_amount >= 1000),
	direction ENUM('Debit', 'Credit') NOT NULL,
    trans_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_updated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    trans_status enum("Failed", "Successful") DEFAULT 'Successful',
	trans_error_code VARCHAR(10),
    
	FOREIGN KEY (trans_error_code) REFERENCES TRANSACTION_ERROR_CODES(trans_error_code) ON DELETE SET NULL,
	FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE SET NULL,
   	FOREIGN KEY (related_cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE SET NULL,
	FOREIGN KEY (trans_type_id) REFERENCES TRANSACTION_TYPES(trans_type_id) ON DELETE SET NULL
	)	;

 CREATE TABLE FAILED_TRANSACTIONS (
    trans_id VARCHAR(18) PRIMARY KEY,
    cus_account_id VARCHAR(17),
    trans_error_code VARCHAR(10) NOT NULL,
    trans_amount INT unsigned NOT NULL,
    failure_reason TEXT NOT NULL,
    attempted_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    
    FOREIGN KEY (trans_error_code) REFERENCES TRANSACTION_ERROR_CODES(trans_error_code) ON DELETE CASCADE,
	FOREIGN KEY (trans_id) REFERENCES TRANSACTIONS(trans_id) ON DELETE CASCADE, 
    FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE
);
DELIMITER //

CREATE TRIGGER validate_transaction_before_insert
BEFORE INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE v_account_status VARCHAR(20);
    DECLARE v_balance BIGINT;
    DECLARE v_daily_total DECIMAL(18,2);
    DECLARE v_daily_limit DECIMAL(18,2);
    DECLARE v_transaction_limit int;
    
    -- Check for same source and destination accounts
    IF NEW.trans_type_id = 'TRF' AND NEW.related_cus_account_id = NEW.cus_account_id THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'VAL-001';
        -- SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Cannot transfer to the same account';
    END IF;
    
    -- Check account status
    SELECT cus_account_status INTO v_account_status 
    FROM CUSTOMER_ACCOUNTS 
    WHERE cus_account_id = NEW.cus_account_id;
    
    IF v_account_status != 'Active' THEN
        SET NEW.trans_status = 'Failed';
        SET NEW.trans_error_code = 'ACC-001';
        -- SIGNAL SQLSTATE '45003' SET MESSAGE_TEXT = 'Account is not active';
    END IF;
    
    -- Check balance for Debit transactions
    IF NEW.direction = 'Debit' THEN
        SELECT 
            CASE 
                WHEN ca.cus_account_type_id = 'S' THEN sa.saving_acc_balance
                WHEN ca.cus_account_type_id = 'C' THEN ca2.check_acc_balance
                ELSE 0
            END INTO v_balance
        FROM CUSTOMER_ACCOUNTS ca
        LEFT JOIN SAVING_ACCOUNTS sa ON ca.cus_account_id = sa.cus_account_id
        LEFT JOIN CHECK_ACCOUNTS ca2 ON ca.cus_account_id = ca2.cus_account_id
        WHERE ca.cus_account_id = NEW.cus_account_id;
        
        IF v_balance < NEW.trans_amount THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'BAL-001';
            -- SIGNAL SQLSTATE '45004' SET MESSAGE_TEXT = 'Insufficient balance'; 
        END IF;
    END IF;
    
         -- Lấy giới hạn từng giao dịch
        SELECT transfer_limit INTO v_transaction_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF NEW.trans_amount > v_transaction_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-002';
        END IF;
    -- Kiểm tra hạn mức giao dịch trong ngày nếu là chuyển tiền Debit
    
    IF NEW.trans_type_id = 'TRF' AND NEW.direction = 'Debit' THEN
        -- Tổng số tiền đã chuyển trong ngày (chỉ tính giao dịch thành công)
        SELECT COALESCE(SUM(trans_amount), 0) INTO v_daily_total
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND DATE(trans_time) = DATE(NEW.trans_time)
        AND direction = 'Debit'
        AND trans_status = 'Successful';

        -- Lấy giới hạn ngày
        SELECT daily_transfer_limit INTO v_daily_limit
        FROM CHECK_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;

        IF (v_daily_total + NEW.trans_amount) > v_daily_limit THEN
            SET NEW.trans_status = 'Failed';
            SET NEW.trans_error_code = 'LIMIT-001';
        END IF;


    END IF;
END;
//
DELIMITER ;

-- Trigger sau khi giao dịch thất bại
DELIMITER //
CREATE TRIGGER after_transaction_failed
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    IF NEW.trans_status = 'Failed' 
    THEN
        INSERT INTO FAILED_TRANSACTIONS (
            trans_id,
            cus_account_id,
            trans_error_code,
            trans_amount,
            failure_reason,
            attempted_time
        ) VALUES (
            NEW.trans_id,
            NEW.cus_account_id,
            NEW.trans_error_code,
            NEW.trans_amount,
            COALESCE((SELECT description FROM TRANSACTION_ERROR_CODES WHERE trans_error_code = NEW.trans_error_code), 'Unknown error'),
            NEW.trans_time
        );
    END IF;
END//
DELIMITER ;

-- -------------------------------------------------------------------


					-- INTERNAL SYSTEM --------------------------------------------
                    
                    

CREATE TABLE IF NOT EXISTS EMPLOYEE_POSITIONS( -- TẠO BẢNG EMPLOYEE_POSITIONS
	emp_position_id VARCHAR(2) primary KEY, -- 'T', 'M', etc
    emp_position_name VARCHAR(15),
    description TEXT
);
CREATE TABLE IF NOT EXISTS EMPLOYEES (
    emp_id VARCHAR(11) PRIMARY KEY, -- [branch_id][position_id][2-digit year][4-digit index]
    emp_fullname VARCHAR(100) NOT NULL,
    emp_sex ENUM('Male', 'Female') NOT NULL,
    emp_dob DATE NOT NULL,
    emp_phone_num VARCHAR(15) UNIQUE NOT NULL, -- + [Mã quốc gia][Số còn lại] VD: +84 901238881
    emp_email VARCHAR(50) UNIQUE NOT NULL,
    emp_address VARCHAR(255) NOT NULL,
    emp_hire_date DATE NOT NULL,
    emp_salary INT(9) UNSIGNED NOT NULL,
    branch_id VARCHAR(4),
    emp_position_id VARCHAR(2),
    
    FOREIGN KEY (branch_id) REFERENCES BRANCHES(branch_id) ON DELETE CASCADE,
    FOREIGN KEY (emp_position_id) REFERENCES EMPLOYEE_POSITIONS(emp_position_id) ON DELETE SET NULL
);
CREATE TABLE IF NOT EXISTS SERVICE_TYPES (
    service_type_id VARCHAR(50) PRIMARY KEY,
    service_name VARCHAR(100) NOT NULL,
    description TEXT
);
CREATE TABLE IF NOT EXISTS EMPLOYEE_CUSTOMERS (
    emp_id VARCHAR(11),
    cus_id VARCHAR(17),
    service_type_id VARCHAR(50) NOT NULL,
    assigned_date DATE NOT NULL,
    
    PRIMARY KEY (emp_id, cus_id),
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE CASCADE,
    FOREIGN KEY (cus_id) REFERENCES CUSTOMERS(cus_id) ON DELETE CASCADE,
    FOREIGN KEY (service_type_id) REFERENCES SERVICE_TYPES(service_type_id) ON DELETE RESTRICT
);
CREATE TABLE EMPLOYEE_ACCOUNTS (
    emp_id VARCHAR(11) PRIMARY KEY,                                      
    username VARCHAR(100) NOT NULL UNIQUE,                 
    password_hash VARCHAR(255) NOT NULL,                   -- Hashed password (never store plaintext passwords)
    status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended') DEFAULT 'Active',
    suspension_time DATETIME NULL,
    reactivation_time DATETIME NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,         
    
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEEs(emp_id) ON DELETE CASCADE  
);
CREATE TABLE DEVICE_TYPES (
    device_type_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_name VARCHAR(50) NOT NULL UNIQUE,      -- Ví dụ: 'desktop', 'laptop', 'thin_client'
    is_portable BOOLEAN DEFAULT FALSE,          -- Có được mang ra ngoài không
    requires_approval BOOLEAN DEFAULT TRUE,     -- Có cần IT duyệt không
    description TEXT
);
CREATE TABLE DEVICES (
    device_id INT AUTO_INCREMENT PRIMARY KEY,
    device_type_id INT NOT NULL,                        
    device_name VARCHAR(100) NOT NULL,
    mac_address VARCHAR(50) NOT NULL,
    ip_address VARCHAR(45),
    is_active BOOLEAN DEFAULT TRUE,
    is_approved BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    last_checked_at DATETIME,
    
    CONSTRAINT fk_type_device FOREIGN KEY (device_type_id) REFERENCES device_types(device_type_id)
);


							-- SYSTEM MANAGEMENT --------------------------------------------
                            
                            
CREATE TABLE SYSTEM_ACTIVITY_CATEGORIES (
    activity_category_id INT AUTO_INCREMENT PRIMARY KEY,      
    activity_category_name VARCHAR(30) unique,
    description TEXT                              
);
CREATE TABLE SYSTEM_ACTIVITIES_HISTORY (
    activity_id INT AUTO_INCREMENT PRIMARY KEY,
    activity_category_id INT NOT NULL,
    activity_time DATETIME NOT NULL,
    emp_id VARCHAR(11) ,
    device_id INT ,
    objective_id VARCHAR(20),
    old_value VARCHAR(15),
    new_value VARCHAR(15),
		CHECK (new_value != old_value),
    description TEXT,
    status ENUM('Successful', 'Failed') NOT NULL,
    
	FOREIGN KEY (activity_category_id) REFERENCES SYSTEM_ACTIVITY_CATEGORIES(activity_category_id) ON DELETE CASCADE,
	FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE SET NULL,
	FOREIGN KEY (device_id) REFERENCES DEVICES(device_id) ON DELETE SET NULL
);
CREATE TABLE INTERNAL_LOGIN_HISTORY (
    emp_id VARCHAR(11),
    login_time DATETIME NOT NULL,
    logout_time DATETIME,
    ip_address VARCHAR(45),
    device_id INT,
    PRIMARY KEY (emp_id, device_id, login_time),
    status ENUM('Successful', 'Failed') NOT NULL,
    failure_reason TEXT,
    
	FOREIGN KEY (emp_id) REFERENCES EMPLOYEES(emp_id) ON DELETE CASCADE,
	FOREIGN KEY (device_id) REFERENCES DEVICES(device_id) ON DELETE CASCADE
);
CREATE TABLE EMPLOYEE_ACCOUNTS_HISTORY (
    history_id INT AUTO_INCREMENT PRIMARY KEY,
    emp_id VARCHAR(11) NOT NULL,
    old_status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended'),
    new_status ENUM('Active', 'Inactive', 'Temporarily Suspended', 'Permanently Suspended') NOT NULL,
    change_time DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    changed_by VARCHAR(11),
    reason TEXT,
    
    FOREIGN KEY (emp_id) REFERENCES EMPLOYEE_ACCOUNTS(emp_id) ON DELETE CASCADE
);
CREATE TABLE CUS_ACCOUNT_CHANGE_HISTORY (
    cus_account_id VARCHAR(17),
    change_time DATETIME NOT NULL,
    field_change VARCHAR(100) NOT NULL,
    new_value TEXT,
    old_value TEXT,
    
	PRIMARY KEY ( cus_account_id, change_time),
	FOREIGN KEY (cus_account_id) REFERENCES CUSTOMER_ACCOUNTS(cus_account_id) ON DELETE CASCADE
);

CREATE TABLE FRAUD_PATTERNS (
    fraud_pattern_id INT auto_increment PRIMARY KEY,
    fraud_pattern_name VARCHAR(100) UNIQUE NOT NULL,
    description TEXT
);
CREATE TABLE SUSPICIONS (
    suspicion_id int auto_increment primary key,
    trans_id VARCHAR(18) ,
    fraud_pattern_id INT,
    detected_time DATETIME(6),
    severity_level enum('Low', 'Medium', 'High') ,
    suspicion_status ENUM('Unresolved', 'Investigating', 'Resolved', 'False_positive') DEFAULT 'Unresolved',
    
	FOREIGN KEY (trans_id) REFERENCES TRANSACTIONs(trans_id) ,
	FOREIGN KEY (fraud_pattern_id) REFERENCES FRAUD_PATTERNS(fraud_pattern_id) ON DELETE CASCADE
);
-- --------------------------------------------------------------------------------
-- CREATE INDEX idx_customer_id ON CUSTOMER_ACCOUNTS(cus_id);
-- CREATE INDEX idx_trans_time ON TRANSACTIONS(trans_time);
-- CREATE INDEX idx_trans_type_id ON TRANSACTIONS(trans_type_id);
-- CREATE INDEX idx_branch_id ON EMPLOYEES(branch_id);
-- CREATE INDEX idx_emp_position_id ON EMPLOYEES(emp_position_id);
-- --------------------------------------------------------------------------------


					-- REPORT --------------------------------------------
                    
                    
CREATE TABLE REPORT (
    report_id INT AUTO_INCREMENT PRIMARY KEY,
    report_name VARCHAR(100) NOT NULL UNIQUE,
    report_description TEXT
);
CREATE TABLE REPORT_ACCESS (
    report_id INT,
    emp_position ENUM('D','M','T','A'),  -- Director, Manager, Teller, Auditor
    PRIMARY KEY (report_id, emp_position),
    FOREIGN KEY (report_id) REFERENCES REPORT(report_id)
);
CREATE TABLE REPORT_FILTER (
    report_id INT,
    filter_name VARCHAR(100),
    filter_type VARCHAR(50),
    is_required BOOLEAN,
    FOREIGN KEY (report_id) REFERENCES report(report_id)
);
#View employee_allowed_reports – Hiển thị các báo cáo mà nhân viên được truy cập
-- CREATE OR REPLACE VIEW employee_allowed_reports AS
-- SELECT 
--     e.Emp_ID, 
--     e.Emp_Position, 
--     r.report_id, 
--     r.report_name, 
--     r.report_description,
--     r.procedure_name
-- FROM Employees e
-- JOIN REPORT_ACCESS ra ON e.Emp_Position = ra.emp_position
-- JOIN REPORT r ON ra.report_id = r.report_id;

-- Check nếu deposit_date ko ở trong tương lai---------------------------------------------------------
SET SQL_SAFE_UPDATES = 0;

CREATE TABLE IF NOT EXISTS DEBUG_LOG (
    id INT AUTO_INCREMENT PRIMARY KEY,
    msg TEXT,
    log_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
SELECT * FROM DEBUG_LOG;
CREATE TABLE TEMP_SUSPICIONS (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    processed BOOLEAN DEFAULT FALSE,
    foreign key (trans_id) REFERENCES TRANSACTIONS(trans_id)
);
select * from temp_suspicions;
select * from transactions;

CREATE TABLE IF NOT EXISTS EVENT_LOG (
    log_time DATETIME DEFAULT NOW(),
    message TEXT
);
select * from suspicions;
DELIMITER //
CREATE EVENT move_temp_to_suspicions
ON SCHEDULE EVERY 5 SECOND
DO
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Error in move_temp_to_suspicions at ', NOW()));
    END;
    
    START TRANSACTION;
    
    INSERT INTO SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
    SELECT trans_id, fraud_pattern_id, detected_time, severity_level
    FROM TEMP_SUSPICIONS
    WHERE processed = FALSE; -- Optional limit for large datasets
    
    UPDATE TEMP_SUSPICIONS
    SET processed = TRUE
    WHERE processed = FALSE
    AND trans_id IN (SELECT trans_id FROM SUSPICIONS WHERE detected_time >= DATE_SUB(NOW(), INTERVAL 1 MINUTE));
    
    INSERT INTO EVENT_LOG (message) VALUES (CONCAT('Event ran at ', NOW()));
    
    COMMIT;
END//
DELIMITER ;
select * from suspicions;
select * from event_log;

-- Check if rows were inserted into SUSPICIONS
SELECT COUNT(*) FROM SUSPICIONS;

-- Check if TEMP_SUSPICIONS rows got marked as processed
SELECT COUNT(*) FROM TEMP_SUSPICIONS WHERE processed = FALSE;

SELECT * FROM EVENT_LOG ORDER BY log_time DESC;


DELIMITER //
CREATE TRIGGER detect_amount_spike
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE yearly_avg DECIMAL(20,2) DEFAULT 0;
    DECLARE pattern_id INT DEFAULT NULL;
    DECLARE recent_trans_count INT DEFAULT 0;
    DECLARE recent_trans_total DECIMAL(20,2) DEFAULT 0;

    -- Bắt đầu ghi log để debug
    INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Trigger fired for ', NEW.trans_id));

    IF NEW.trans_status = 'Successful' THEN

        SELECT fraud_pattern_id INTO pattern_id
        FROM FRAUD_PATTERNS
        WHERE fraud_pattern_name = 'Transaction Amount Spike'
        LIMIT 1;

        IF pattern_id IS NOT NULL THEN

            SELECT IFNULL(AVG(trans_amount), 0) INTO yearly_avg
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time >= DATE_SUB(NEW.trans_time, INTERVAL 1 YEAR);

            SELECT COUNT(*), IFNULL(SUM(trans_amount), 0)
            INTO recent_trans_count, recent_trans_total
            FROM TRANSACTIONS
            WHERE cus_account_id = NEW.cus_account_id
              AND trans_status = 'Successful'
              AND trans_time BETWEEN DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE) AND NEW.trans_time;

            INSERT INTO DEBUG_LOG (msg) 
            VALUES (
                CONCAT('AVG=', yearly_avg, ', CNT=', recent_trans_count,  'TOTAL=', recent_trans_total, 'TRANS_TIME' , DATE_SUB(NEW.trans_time, INTERVAL 15 MINUTE))
            );

            IF yearly_avg > 0 AND recent_trans_count >= 5 AND recent_trans_total > (yearly_avg * 10) THEN
                INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
                VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');

                INSERT INTO DEBUG_LOG (msg) VALUES (CONCAT('Suspicion inserted for ', NEW.trans_id));

            END IF;
        ELSE
            INSERT INTO DEBUG_LOG (msg) VALUES ('Pattern ID not found');
        END IF;
    ELSE
        INSERT INTO DEBUG_LOG (msg) VALUES ('Transaction not successful');
    END IF;
END//

DELIMITER ;


DELIMITER ;
-- Dormant acc activity trigger
DELIMITER //

CREATE TRIGGER detect_dormant_activity
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE last_trans_date DATETIME;
    DECLARE pattern_id INT;
    
    -- Chỉ kiểm tra giao dịch thành công >= 50,000,000
    IF NEW.trans_status = 'Successful' AND NEW.trans_amount >= 50000000 THEN
        -- Lấy ID mẫu gian lận
        SELECT fraud_pattern_id INTO pattern_id 
        FROM FRAUD_PATTERNS 
        WHERE fraud_pattern_name = 'Dormant Account Activity';
        
        -- Lấy ngày giao dịch cuối cùng
        SELECT MAX(trans_time) INTO last_trans_date
        FROM TRANSACTIONS
        WHERE cus_account_id = NEW.cus_account_id
        AND trans_id != NEW.trans_id
        AND trans_status = 'Successful';
        
        -- Kiểm tra tài khoản không hoạt động >3 tháng
        IF last_trans_date IS NOT NULL AND DATEDIFF(NEW.trans_time, last_trans_date) > 90 THEN
            -- Thêm vào bảng SUSPICIONS với severity_level tạm thời
            INSERT INTO TEMP_SUSPICIONS (trans_id, fraud_pattern_id, detected_time, severity_level)
            VALUES (NEW.trans_id, pattern_id, NOW(), 'Low');
            
            -- Log thông tin vào DEBUG_LOG
            INSERT INTO DEBUG_LOG (msg) 
            VALUES (CONCAT('Suspicion detected for ', NEW.trans_id, ': Dormant Account Activity, Account: ', NEW.cus_account_id, ', Transaction Date: ', NEW.trans_time));
        END IF;
    END IF;
END//
DELIMITER ;

CREATE TABLE SUSPICIONS_PENDING_UPDATE (
    trans_id VARCHAR(18),
    fraud_pattern_id INT,
    detected_time DATETIME,
    severity_level ENUM('Low', 'Medium', 'High'),
    PRIMARY KEY (trans_id, fraud_pattern_id, detected_time)
);
-- *severity level update
DELIMITER //

CREATE TRIGGER update_severity_based_on_violations
AFTER INSERT ON SUSPICIONS
FOR EACH ROW
BEGIN
    DECLARE violation_count INT;
    DECLARE account_id VARCHAR(17);
    DECLARE new_severity ENUM('Low', 'Medium', 'High');

    -- Lấy account ID liên quan
    SELECT cus_account_id INTO account_id
    FROM TRANSACTIONS
    WHERE trans_id = NEW.trans_id;

    -- Đếm số lần vi phạm (không tính False_positive)
    SELECT COUNT(*) INTO violation_count
    FROM SUSPICIONS s
    JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
    WHERE t.cus_account_id = account_id
    AND s.suspicion_status != 'False_positive'
    AND s.fraud_pattern_id = NEW.fraud_pattern_id;

    -- Xác định mức độ nghiêm trọng
    SET new_severity = CASE
        WHEN violation_count >= 3 THEN 'High'
        WHEN violation_count = 2 THEN 'Medium'
        ELSE 'Low'
    END;

    -- Gửi dữ liệu cập nhật sang bảng trung gian
    INSERT INTO SUSPICIONS_PENDING_UPDATE (trans_id, fraud_pattern_id, detected_time, severity_level)
    VALUES (NEW.trans_id, NEW.fraud_pattern_id, NEW.detected_time, new_severity)
    ON DUPLICATE KEY UPDATE severity_level = VALUES(severity_level);

    -- Gọi thủ tục khóa tài khoản nếu cần
    CALL check_and_lock_account(account_id);
END//

DELIMITER ;
DELIMITER //

CREATE EVENT apply_pending_severity_updates
ON SCHEDULE EVERY 5 SECOND
DO
BEGIN
    START TRANSACTION;

    -- Áp dụng cập nhật mức độ nghiêm trọng
    UPDATE SUSPICIONS s
    JOIN SUSPICIONS_PENDING_UPDATE spu
    ON s.trans_id = spu.trans_id
       AND s.fraud_pattern_id = spu.fraud_pattern_id
       AND s.detected_time = spu.detected_time
    SET s.severity_level = spu.severity_level;

    -- Dọn bảng trung gian
    DELETE FROM SUSPICIONS_PENDING_UPDATE;

    COMMIT;
END//

DELIMITER ;
-- =====================================
########################################################
CREATE TABLE DEBUG_LOG_2 (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    log_time DATETIME DEFAULT CURRENT_TIMESTAMP,
    account_id VARCHAR(17),
    current_status VARCHAR(20),
    high_severity_count INT,
    action_taken VARCHAR(100)
);


-- Lock account
DELIMITER //
CREATE PROCEDURE check_and_lock_account(IN p_account_id VARCHAR(17))
BEGIN
    DECLARE high_severity_count INT DEFAULT 0;
    DECLARE current_status VARCHAR(20);
    DECLARE action_msg VARCHAR(100);

    -- Lấy trạng thái hiện tại
    SELECT cus_account_status INTO current_status
    FROM CUSTOMER_ACCOUNTS
    WHERE cus_account_id = p_account_id;

    -- Mặc định chưa có hành động
    SET action_msg = 'No action taken';

    -- Chỉ xử lý nếu tài khoản chưa bị khóa
    IF current_status = 'Active' THEN
        -- Đếm số nghi ngờ High severity (không tính False_positive)
        SELECT COUNT(*) INTO high_severity_count
        FROM SUSPICIONS s
        JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
        WHERE t.cus_account_id = p_account_id
        AND s.suspicion_status != 'False_positive'
        AND s.suspicion_status != 'Resolved';

        -- Khóa tài khoản nếu có >=3 High severity
        IF high_severity_count >= 6 THEN
            UPDATE CUSTOMER_ACCOUNTS
            SET cus_account_status = 'Temporarily Locked'
            WHERE cus_account_id = p_account_id;

            SET action_msg = 'Account temporarily locked due to 3+ high severity suspicions';
        ELSE
            SET action_msg = 'Less than 3 high severity suspicions – no lock';
        END IF;
    ELSE
        SET action_msg = CONCAT('No action – status is ', current_status);
    END IF;

    -- Ghi log vào DEBUG_LOG_2
    INSERT INTO DEBUG_LOG_2 (account_id, current_status, high_severity_count, action_taken)
    VALUES (p_account_id, current_status, high_severity_count, action_msg);
END//
DELIMITER ;

SELECT * FROM customer_accounts;

###############################################################################################################################
INSERT INTO BRANCHES (branch_id, branch_name, branch_address) VALUES
('HN', 'Hanoi', '123 Lang Street, Dong Da District, Hanoi'),
('HCM', 'Ho Chi Minh City', '456 Le Loi Street, District 1, Ho Chi Minh City'),
('DN', 'Da Nang', '789 Nguyen Van Linh Street, Hai Chau District, Da Nang'),
('QN', 'Quang Ninh', '321 Tran Hung Dao Street, Ha Long City, Quang Ninh'),
('HP', 'Hai Phong', '101 Lach Tray Street, Ngo Quyen District, Hai Phong');
-- INSERT INTO CUSTOMERS (
--     cus_ID, cus_first_name, cus_last_name, cus_dob, cus_email, cus_address,
--     cus_phone_num, cus_sex, cus_identification_id, cus_register_date, branch_id
-- ) VALUES
-- ('DTNBHN210000001', 'Nguyễn Văn', 'An', '1990-05-15', 'an.nguyenvan@gmail.com', '12 Lang Ha Street, Dong Da District, Hanoi', '+84 98 765 4321', 'Male', '012345678901', '2021-06-10', 'HN'),
-- ('DTNBHCM210000002', 'Trần Thị', 'Bích', '1985-08-20', 'bich.tranth@gmail.com', '45 Nguyen Thi Minh Khai Street, District 1, Ho Chi Minh City', '+84 91 234 5678', 'Female', '023456789012', '2021-09-15', 'HCM'),
-- ('DTNBDN220000003', 'Lê Văn', 'Cường', '1995-03-10', 'cuong.levan95@gmail.com', '89 Le Duan Street, Hai Chau District, Da Nang', '+84 92 345 6789', 'Male', '034567890123', '2022-03-05', 'DN'),
-- ('DTNBQN220000004', 'Phạm Vân', 'Thư', '1992-07-25', 'thu.phamvan92@gmail.com', '134 Tran Quoc Nghien Street, Ha Long City, Quang Ninh', '+84 96 112 2334', 'Female', '045678901234', '2022-07-12', 'QN'),
-- ('DTNBHP230000005', 'Nguyễn Phương', 'Đông', '1988-12-01', 'dong.nguyenphuong88@gmail.com', '210 Lach Tray Street, Ngo Quyen District, Hai Phong', '+84 97 998 8776', 'Male', '056789012345', '2023-01-20', 'HP'),
-- ('DTNBHN230000006', 'Lê Ngọc', 'Bích', '1993-11-18', 'bich.lengoc93@gmail.com', '18 Giang Vo Street, Ba Dinh District, Hanoi', '+84 90 567 8912', 'Female', '067890123456', '2023-04-22', 'HN'),
-- ('DTNBHN240000007', 'Hoàng Thị Thanh', 'Nhàn', '1980-04-30', 'nhan.hoangthithanh80@gmail.com', '20 Kim Ma Street, Ba Dinh District, Hanoi', '+84 93 456 7890', 'Female', '078901234567', '2024-02-28', 'HN'),
-- ('DTNBHCM240000008', 'Nguyễn Thị Thu', 'Trang', '1997-09-05', 'trang.nguyenthithu97@gmail.com', '67 Le Van Sy Street, District 3, Ho Chi Minh City', '+84 91 123 4567', 'Female', '089012345678', '2024-05-01', 'HCM');
INSERT INTO TRANSACTION_TYPES (trans_type_id, trans_type_name, description)
VALUES
    ('POS', 'Point of Sale', 'Debit/credit card purchases at stores, online payments. Extremely frequent in retail banking.'),
    ('DEP', 'Deposit', 'Includes salary credit, cash deposits, check deposits.'),
    ('WDL', 'Withdrawal', 'ATM cash withdrawals or over-the-counter withdrawals.'),
    ('TRF', 'Transfer', 'Transfers between personal accounts or to other people/banks.'),
    ('PMT', 'Payment', 'Loan repayments, utility bill payments, subscriptions.'),
    ('ACH', 'Automated Clearing House', 'Payroll, insurance, recurring payments (e.g., Netflix, insurance).'),
    ('INT', 'Interest Credit', 'Monthly or quarterly interest accruals on savings accounts.'),
    ('FEE', 'Fee Charge', 'Service charges, ATM fees, late fees, etc.'),
    ('CHK', 'Check', 'Used more in business or older accounts (declining in use).'),
    ('REF', 'Refund', 'E-commerce or billing refunds (increasing in usage).');
INSERT INTO CUSTOMER_ACCOUNT_TYPES VALUES 
('S', 'Saving Account'),
('C', 'Checking Account'),
('F', 'Fixed Deposit Account');
INSERT INTO TRANSACTION_ERROR_CODES VALUES
('VAL-001', 'SAME ACCOUNT', 'Source and destination accounts are the same', TRUE, TRUE, FALSE),
('ACC-001', 'ACCOUNT LOCKED', 'The account has been locked', TRUE, FALSE, TRUE),
('BAL-001', 'INSUFFICIENT BALANCE', 'Insufficient account balance', TRUE, TRUE, FALSE),
('LIMIT-001', 'TRANSACTION LIMIT EXCEEDED', 'Exceeded the transaction limit', TRUE, FALSE, TRUE),
('LIMIT-002', 'DAILY TRANSACTION LIMIT EXCEEDED', 'Exceeded the daily transaction limit', TRUE, FALSE, TRUE);
INSERT INTO INTEREST_RATES (interest_rate_val, cus_account_type_id, min_balance, max_balance, status, term)
VALUES
(0.1, 'C', 0, NULL, 'Active', NULL),
(1.9, 'S', 100000, 1000000000, 'Active', NULL),
(4.8, 'F', 1000000, NULL, 'Active', 1),
(5.2, 'F', 1000000, NULL, 'Active', 6),
(5.5, 'F', 1000000, NULL, 'Inactive', 12);
INSERT INTO SERVICE_TYPES (service_type_id, service_name, description)
VALUES
    -- Core Banking Service Groups
    ('ACCT', 'Account Services', 'Opening, closing, and managing customer accounts'),
    ('CARD', 'Card Services', 'Issuance and management of debit/credit cards'),
    ('LOAN', 'Loan Services', 'Processing and management of loan products'),
    ('TRAN', 'Transaction Services', 'Handling deposits, withdrawals, and transfers'),
    ('CUST', 'Customer Support', 'Resolving inquiries and complaints'),
    ('OPS', 'Internal Operations', 'Back-office processes and reconciliations'),
    ('DIGI', 'Digital Banking', 'Online and mobile banking services'),
    ('INVT', 'Investment Services', 'Wealth management and investment products'),
    ('INSR', 'Insurance Services', 'Bank-linked insurance offerings'),
    ('COMP', 'Compliance Reporting', 'Regulatory and anti-fraud operations');
INSERT INTO EMPLOYEE_POSITIONS (emp_position_id, emp_position_name, description)
VALUES 
('T', 'Teller', 'Handles daily banking transactions'),
('M', 'Manager', 'Manages bank branch operations'),
('A', 'Auditor', 'Responsible for reviewing and auditing financial records'),
('D', 'Director', 'Oversees and manages the operations of the department or company');
INSERT INTO DEVICE_TYPES (device_type_name, is_portable, requires_approval, description)
VALUES
    ('Desktop', FALSE, FALSE, 'Standard device for most office-based employees (e.g., tellers, customer service, loan officers).'),
    ('Laptop', TRUE, FALSE, 'For mobile employees, managers, auditors, or IT staff who may need to work remotely or across branches.'),
    ('Thin Client', FALSE, FALSE, 'Used in highly secure environments (e.g., call centers or branch service counters).'),
    ('Mobile Device', TRUE, TRUE, 'Typically for notifications, approvals (e.g., 2FA or digital signatures by senior staff).'),
    ('Admin Console', FALSE, TRUE, 'Used by system admins or database administrators to manage internal systems.');
INSERT INTO DEVICES (device_type_id, device_name, mac_address, ip_address, is_active, is_approved, created_at, last_checked_at)
VALUES
    -- Nhân viên 101 (IT Department)
    (1, 'PC-Accounting-01', '00:1A:2B:3C:4D:5E', '192.168.1.100', TRUE, TRUE, '2023-01-15 09:00:00', '2023-12-01 14:30:00'),
    (2, 'Laptop-IT-01', '00:1A:2B:3C:4D:5F', '192.168.1.101', TRUE, TRUE, '2023-01-16 10:00:00', '2023-12-01 14:35:00'),
    -- Nhân viên 205 (Giao dịch viên)
    (2, 'VM-Accounting-Backup', '00:1A:2B:3C:4D:60', '192.168.2.50', TRUE, TRUE, '2023-02-10 08:30:00', '2023-12-01 15:00:00'),
    (4, 'Samsung Galaxy S23', '00:1A:2B:3C:4D:61', NULL, TRUE, TRUE, '2023-02-12 13:15:00', '2023-12-01 15:05:00'),
    -- Nhân viên 307 (Quản lý chi nhánh)
    (3, 'ThinClient-01', '00:1A:2B:3C:4D:62', '192.168.3.20', TRUE, TRUE, '2023-03-05 11:20:00', '2023-12-01 16:00:00');
INSERT INTO FRAUD_PATTERNS (fraud_pattern_name, description)
VALUES 
('Transaction Amount Spike', 'More than 5 consecutive transaction in less than 15 minutes exceeds 10 times the average amount of that account over 1-year interval.(if these transaction amounts exceed 50000000'),
('Dormant Account Activity', 'An account that has not had transactions for more than 3 months suddenly has a large transaction. From 50,000,000');
SHOW TRIGGERS;
DESCRIBE SUSPICIONS;

-- INSERT INTO EMPLOYEES (emp_id, emp_fullname, emp_sex, emp_dob, emp_phone_num, emp_email, emp_address, emp_hire_date, emp_salary, branch_id, emp_position_id)
-- VALUES 
-- ('1T2301001', 'John Doe', 'Male', '1985-01-01', '+84901234567', 'johndoe@example.com', '123 Street, City', '2023-06-15', 15000000, 'HN', 'T'),
-- ('2M2301002', 'Jane Smith', 'Female', '1990-02-20', '+84909876543', 'janesmith@example.com', '456 Avenue, City', '2022-05-10', 20000000, 'HN', 'M');

-- -- -----------------------------------
CREATE OR REPLACE VIEW saving_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(saving_acc_balance, 0), ' VND') AS saving_acc_balance
FROM SAVING_ACCOUNTS;

CREATE OR REPLACE VIEW check_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(check_acc_balance, 0), ' VND') AS check_acc_balance,
  CONCAT(FORMAT(transfer_limit, 0), ' VND') AS transfer_limit,
  CONCAT(FORMAT(daily_transfer_limit, 0), ' VND') AS daily_transfer_limit
FROM CHECK_ACCOUNTS;

CREATE OR REPLACE VIEW fixed_deposit_accounts_view AS
SELECT 
  cus_account_id,
  interest_rate_id,
  CONCAT(FORMAT(deposit_amount, 0), ' VND') AS deposit_amount,
  deposit_date,
  maturity_date
FROM FIXED_DEPOSIT_ACCOUNTS;
CREATE OR REPLACE VIEW customer_accounts_view AS
SELECT 
  cus_account_id,
  cus_id,
  cus_account_status,
  DATE_FORMAT(opening_date, '%d-%m-%Y %H:%i:%s') AS formatted_opening_date,
  cus_account_type_id
FROM CUSTOMER_ACCOUNTS;

DELIMITER //

CREATE TRIGGER update_balances_after_transaction
AFTER INSERT ON TRANSACTIONS
FOR EACH ROW
BEGIN
    DECLARE account_type VARCHAR(2);
    
    -- Chỉ xử lý khi giao dịch thành công
    IF NEW.trans_status = 'Successful' THEN
        -- Lấy loại tài khoản
        SELECT cus_account_type_id INTO account_type
        FROM CUSTOMER_ACCOUNTS
        WHERE cus_account_id = NEW.cus_account_id;
        
        -- Xử lý trừ tiền từ tài khoản nguồn (Debit)
        IF NEW.direction = 'Debit' THEN
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance - NEW.trans_amount
                WHERE cus_account_id = NEW.cus_account_id;
            END IF;
        END IF;
        
        -- Xử lý cộng tiền vào tài khoản đích (nếu có và là Credit)
        -- IF NEW.related_cus_account_id IS NOT NULL AND NEW.direction = 'Credit' THEN
        IF NEW.related_cus_account_id IS NOT NULL THEN
            SELECT cus_account_type_id INTO account_type
            FROM CUSTOMER_ACCOUNTS
            WHERE cus_account_id = NEW.related_cus_account_id;
            
            IF account_type = 'C' THEN -- Check account
                UPDATE CHECK_ACCOUNTS
                SET check_acc_balance = check_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            ELSEIF account_type = 'S' THEN -- Saving account
                UPDATE SAVING_ACCOUNTS
                SET saving_acc_balance = saving_acc_balance + NEW.trans_amount
                WHERE cus_account_id = NEW.related_cus_account_id;
            END IF;
        END IF;
    END IF;
END //

DELIMITER ;
DELIMITER //

CREATE PROCEDURE calculate_interest_for_accounts()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE account_id VARCHAR(17);
    DECLARE acc_type VARCHAR(2);
    DECLARE balance BIGINT;
    DECLARE rate DECIMAL(5,3);
    DECLARE interest_amount DECIMAL(18,2);
    DECLARE term_months INT;
    
    -- Cursor cho tài khoản tiết kiệm (S)
    DECLARE saving_cursor CURSOR FOR 
        SELECT sa.cus_account_id, sa.saving_acc_balance, ir.interest_rate_val
        FROM SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON sa.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'S'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active';
    
    -- Cursor cho tài khoản tiền gửi có kỳ hạn (F)
    DECLARE fixed_cursor CURSOR FOR 
        SELECT fd.cus_account_id, fd.deposit_amount, ir.interest_rate_val, ir.term
        FROM FIXED_DEPOSIT_ACCOUNTS fd
        JOIN CUSTOMER_ACCOUNTS ca ON fd.cus_account_id = ca.cus_account_id
        JOIN INTEREST_RATES ir ON fd.interest_rate_id = ir.interest_rate_id
        WHERE ir.cus_account_type_id = 'F'
        AND ir.status = 'Active'
        AND ca.cus_account_status = 'Active'
        AND fd.maturity_date <= CURDATE();
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Xử lý tài khoản tiết kiệm (hàng tháng)
    OPEN saving_cursor;
    saving_loop: LOOP
        FETCH saving_cursor INTO account_id, balance, rate;
        IF done THEN
            LEAVE saving_loop;
        END IF;
        
        -- Tính lãi hàng tháng (lãi suất năm chia 12)
        SET interest_amount = balance * (rate / 100 / 12);
        
        -- Cộng lãi vào tài khoản
        UPDATE SAVING_ACCOUNTS
        SET saving_acc_balance = saving_acc_balance + interest_amount
        WHERE cus_account_id = account_id;
        
        -- Ghi nhận giao dịch lãi
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('INT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'INT',
            account_id,
            interest_amount,
            'Credit',
            'Successful'
        );
    END LOOP;
    CLOSE saving_cursor;
    
    SET done = FALSE;
    
    -- Xử lý tài khoản tiền gửi có kỳ hạn (khi đáo hạn)
    OPEN fixed_cursor;
    fixed_loop: LOOP
        FETCH fixed_cursor INTO account_id, balance, rate, term_months;
        IF done THEN
            LEAVE fixed_loop;
        END IF;
        
        -- Tính lãi theo kỳ hạn
        SET interest_amount = balance * (rate / 100) * (term_months / 12);
        
        -- Cộng lãi và gốc vào tài khoản tiết kiệm (hoặc check account)
        -- Giả sử chuyển vào tài khoản tiết kiệm cùng khách hàng
        UPDATE SAVING_ACCOUNTS sa
        JOIN CUSTOMER_ACCOUNTS ca ON sa.cus_account_id = (
            SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
            WHERE cus_id = (
                SELECT cus_id FROM CUSTOMER_ACCOUNTS 
                WHERE cus_account_id = account_id
            )
            AND cus_account_type_id = 'S'
            LIMIT 1
        )
        SET sa.saving_acc_balance = sa.saving_acc_balance + balance + interest_amount;
        
        -- Ghi nhận giao dịch lãi và gốc
        INSERT INTO TRANSACTIONS (
            trans_id,
            trans_type_id,
            cus_account_id,
            related_cus_account_id,
            trans_amount,
            direction,
            trans_status
        ) VALUES (
            CONCAT('MAT', DATE_FORMAT(CURDATE(), '%y%m%d'), LPAD(account_id, 8, '0')),
            'MAT',
            account_id,
            (SELECT cus_account_id FROM CUSTOMER_ACCOUNTS 
             WHERE cus_id = (SELECT cus_id FROM CUSTOMER_ACCOUNTS WHERE cus_account_id = account_id)
             AND cus_account_type_id = 'S' LIMIT 1),
            balance + interest_amount,
            'Credit',
            'Successful'
        );
        
        -- Đóng tài khoản tiền gửi có kỳ hạn
        DELETE FROM FIXED_DEPOSIT_ACCOUNTS WHERE cus_account_id = account_id;
        UPDATE CUSTOMER_ACCOUNTS SET cus_account_status = 'Locked' WHERE cus_account_id = account_id;
    END LOOP;
    CLOSE fixed_cursor;
END //

DELIMITER ;
-- Bật event scheduler nếu chưa bật

-- Tạo event tính lãi tự động chạy vào 00:00 ngày đầu tháng
CREATE EVENT IF NOT EXISTS auto_calculate_interest
ON SCHEDULE 
    EVERY 1 MONTH
    STARTS TIMESTAMP(DATE_FORMAT(DATE_ADD(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01 00:00:00'))
DO
    CALL calculate_interest_for_accounts();
##############################################
-- DELIMITER //

-- CREATE TRIGGER prevent_transaction_if_inactive
-- BEFORE INSERT ON TRANSACTIONS
-- FOR EACH ROW
-- BEGIN
--     DECLARE acc_status VARCHAR(20);
--     DECLARE err_msg TEXT;

--         -- Lấy trạng thái tài khoản
--         SELECT cus_account_status INTO acc_status
--         FROM CUSTOMER_ACCOUNTS
--         WHERE cus_account_id = NEW.cus_account_id;

--         -- Nếu không phải 'Active' thì tạo message rồi báo lỗi
--         IF acc_status != 'Active' THEN
--             SET err_msg = CONCAT('Transaction denied. Account status is: ', acc_status);
--             SIGNAL SQLSTATE '45000'
--             SET MESSAGE_TEXT = err_msg;
--     END IF;
-- END;
-- //

-- DELIMITER ;


-- ============================================
INSERT INTO CUSTOMERS VALUES 
('DTNB0101010000001', 'John', 'Doe', '1990-01-01', 'john@example.com', '123 Main St', '+84 901238881', 'Male', 'ID123456789', 'HN');
-- Saving Account
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBS25000001', 'DTNB0101010000001', 'Active', NOW(), 'S');
UPDATE SAVING_ACCOUNTS
	SET saving_acc_balance = 200000
    WHERE cus_account_id = "DTNBS25000001" ; 
    



-- Checking Account
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBC25000001', 'DTNB0101010000001', 'Active', NOW(), 'C');
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBC25000002', 'DTNB0101010000001', 'Active', NOW(), 'C');
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBC25000003', 'DTNB0101010000001', 'Locked', NOW(), 'C');

UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 2000000
    WHERE cus_account_id = "DTNBC25000001" ;
UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 20000000, transfer_limit = 50000000, daily_transfer_limit = 500000000
    WHERE cus_account_id = "DTNBC25000002" ;    
UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 2000000
    WHERE cus_account_id = "DTNBC25000003" ;




INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBF25000001', 'DTNB0101010000001', 'Active', NOW(), 'F');
UPDATE FIXED_DEPOSIT_ACCOUNTS
SET deposit_amount = 2000000
    WHERE cus_account_id = "DTNBF25000001" ;  
    




-- Locked Account for testing
-- INSERT INTO CHECK_ACCOUNTS VALUES ('DTNBC25000003', 500000 ,1, 1000000, 100000000);
-- INVALID AMOUNT
INSERT INTO TRANSACTIONS VALUES ('TXN001', 'WDL', 'DTNBC25000002', NULL, 50900, 'Debit', NOW(), NOW(), 'Successful', NULL);
INSERT INTO TRANSACTIONS VALUES ('TXN002', 'TRF', 'DTNBC25000002', 'DTNBC25000002', 10000, 'Debit', NOW(), NOW(), 'Successful', NULL);
INSERT INTO TRANSACTIONS VALUES ('TXN003', 'TRF', 'DTNBC25000003', 'DTNBC25000002', 100000, 'Debit', NOW(), NOW(), 'Successful', NULL);
INSERT INTO TRANSACTIONS VALUES ('TXN005', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 8000, 'Debit', NOW(), NOW(), 'Failed', 'BAL-001');
INSERT INTO TRANSACTIONS VALUES ('TXN006', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 50000, 'Debit', NOW(), NOW(), 'Successful', NULL);
INSERT INTO TRANSACTIONS VALUES ('TXN007', 'TRF', 'DTNBC25000001', 'DTNBC25000002', 500000, 'Debit', NOW(), NOW(), 'Successful', NULL);

-- First, let's establish a baseline average (small transactions)
INSERT INTO TRANSACTIONS VALUES 
('TXN008', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 100000, 'Debit', NOW(), NOW(), 'Successful', NULL),
('TXN009', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 150000, 'Debit', NOW(), NOW(), 'Successful', NULL),
('TXN010', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 200000, 'Debit', NOW(), NOW(), 'Successful', NULL);

-- Now insert a spike transaction (3x average should be ~450,000, so we'll do 500,000)
INSERT INTO TRANSACTIONS VALUES 
('TXN011', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 500000, 'Debit', NOW(), NOW(), 'Successful', NULL);
-- Tạo lịch sử giao dịch 1 năm cho tài khoản DTNBC25000002
INSERT INTO TRANSACTIONS VALUES 
('TXN029', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1000000, 'Debit', DATE_SUB(NOW(), INTERVAL 11 MONTH), DATE_SUB(NOW(), INTERVAL 11 MONTH), 'Successful', NULL),
('TXN030', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1500000, 'Debit', DATE_SUB(NOW(), INTERVAL 10 MONTH), DATE_SUB(NOW(), INTERVAL 10 MONTH), 'Successful', NULL),
('TXN031', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 2000000, 'Debit', DATE_SUB(NOW(), INTERVAL 9 MONTH), DATE_SUB(NOW(), INTERVAL 9 MONTH), 'Successful', NULL),
('TXN032', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1200000, 'Debit', DATE_SUB(NOW(), INTERVAL 8 MONTH), DATE_SUB(NOW(), INTERVAL 8 MONTH), 'Successful', NULL),
('TXN033', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1800000, 'Debit', DATE_SUB(NOW(), INTERVAL 7 MONTH), DATE_SUB(NOW(), INTERVAL 7 MONTH), 'Successful', NULL),
('TXN034', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 900000, 'Debit', DATE_SUB(NOW(), INTERVAL 6 MONTH), DATE_SUB(NOW(), INTERVAL 6 MONTH), 'Successful', NULL),
('TXN035', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1100000, 'Debit', DATE_SUB(NOW(), INTERVAL 5 MONTH), DATE_SUB(NOW(), INTERVAL 5 MONTH), 'Successful', NULL),
('TXN036', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1300000, 'Debit', DATE_SUB(NOW(), INTERVAL 4 MONTH), DATE_SUB(NOW(), INTERVAL 4 MONTH), 'Successful', NULL),
('TXN037', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1700000, 'Debit', DATE_SUB(NOW(), INTERVAL 3 MONTH), DATE_SUB(NOW(), INTERVAL 3 MONTH), 'Successful', NULL),
('TXN038', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1400000, 'Debit', DATE_SUB(NOW(), INTERVAL 2 MONTH), DATE_SUB(NOW(), INTERVAL 2 MONTH), 'Successful', NULL),
('TXN039', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1600000, 'Debit', DATE_SUB(NOW(), INTERVAL 1 MONTH), DATE_SUB(NOW(), INTERVAL 1 MONTH), 'Successful', NULL);

-- Giao dịch bình thường gần đây (không đáng ngờ)
INSERT INTO TRANSACTIONS VALUES 
('TXN040', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1500000, 'Debit', DATE_SUB(NOW(), INTERVAL 1 HOUR), DATE_SUB(NOW(), INTERVAL 1 HOUR), 'Successful', NULL),
('TXN041', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 1200000, 'Debit', DATE_SUB(NOW(), INTERVAL 30 MINUTE), DATE_SUB(NOW(), INTERVAL 30 MINUTE), 'Successful', NULL);
-- Tính toán: 
-- Trung bình 1 năm = ~1,400,000 VND 
-- 10x trung bình = 14,000,000 VND
-- Cần 5 giao dịch trong 15 phút tổng > 14,000,000 VND

-- Chuỗi giao dịch gian lận trong 15 phút
INSERT INTO TRANSACTIONS VALUES 
('TXN042', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 14 MINUTE), DATE_SUB(NOW(), INTERVAL 14 MINUTE), 'Successful', NULL),
('TXN043', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 3500000, 'Debit', DATE_SUB(NOW(), INTERVAL 12 MINUTE), DATE_SUB(NOW(), INTERVAL 12 MINUTE), 'Successful', NULL),
('TXN044', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 4000000, 'Debit', DATE_SUB(NOW(), INTERVAL 10 MINUTE), DATE_SUB(NOW(), INTERVAL 10 MINUTE), 'Successful', NULL),
('TXN045', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 2500000, 'Debit', DATE_SUB(NOW(), INTERVAL 8 MINUTE), DATE_SUB(NOW(), INTERVAL 8 MINUTE), 'Successful', NULL),
('TXN046', 'TRF', 'DTNBC25000002', 'DTNBS25000001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 5 MINUTE), DATE_SUB(NOW(), INTERVAL 5 MINUTE), 'Successful', NULL);
select * from customer_accounts;
select * from suspicions;
-- Tổng: 16,000,000 VND (>10x trung bình) trong 5 giao dịch

-- First, create a dormant account (no transactions for >3 months)
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('DTNBC25000004', 'DTNB0101010000001', 'Active', DATE_SUB(NOW(), INTERVAL 4 MONTH), 'C');
-- INSERT INTO CHECK_ACCOUNTS VALUES ('DTNBC25000004', 2000000, NULL, 50000000, 500000000);

-- Now add a large transaction to trigger dormant account detection
INSERT INTO TRANSACTIONS VALUES 
('TXN018', 'TRF', 'DTNBC25000004', 'DTNBS25000001', 50000000, 'Debit', NOW(), NOW(), 'Successful', NULL);
-- SELECT * FROM SUSPICIONS;
-- SELECT * FROM saving_accounts_view;
-- SELECT * FROM check_accounts_view;
-- SELECT * FROM fixed_deposit_accounts_view;
-- SELECT * FROM customer_accounts_view;
-- select * from transactions;
-- select * from failed_transactions;

select * from suspicions;
-- Thêm khách hàng mẫu
INSERT INTO CUSTOMERS VALUES 
('CUS001', 'Nguyen', 'Van A', '1990-01-01', 'nguyenvana@email.com', '123 Đường ABC, Hà Nội', '0912345678', 'Male', '123456789012', 'HN');
-- Thêm tài khoản tiết kiệm
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('ACC001', 'CUS001', 'Active', NOW(), 'S');
UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 2000000
    WHERE cus_account_id = "ACC001" ;

-- Thêm tài khoản thanh toán
INSERT INTO CUSTOMER_ACCOUNTS VALUES ('ACC002', 'CUS001', 'Active', NOW(), 'C');
UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 200000000000000000
    WHERE cus_account_id = "ACC002" ;-- Thêm tài khoản không hoạt động (dormant)

SELECT * FROM CUSTOMER_ACCOUNTS;
-- Test case 1: Giao dịch bình thường không kích hoạt trigger
INSERT INTO TRANSACTIONS VALUES 
('TXN012', 'TRF', 'ACC002', 'ACC001', 1500000, 'Debit', NOW(), NOW(), 'Successful', NULL);

-- Test case 2: 5 giao dịch trong 15 phút vượt 10x trung bình (trung bình ~1.4tr, 10x = 14tr)
-- Lower yearly average for ACC002 by inserting small transactions
-- Insert small transactions (before amount spike)
INSERT INTO TRANSACTIONS VALUES
('AS115', 'TRF', 'ACC002', 'ACC001', 100000, 'Debit', DATE_SUB(NOW(), INTERVAL 350 DAY), DATE_SUB(NOW(), INTERVAL 350 DAY), 'Successful', NULL),
('AS116', 'TRF', 'ACC002', 'ACC001', 120000, 'Debit', DATE_SUB(NOW(), INTERVAL 330 DAY), DATE_SUB(NOW(), INTERVAL 330 DAY), 'Successful', NULL),
('AS117', 'TRF', 'ACC002', 'ACC001', 95000,  'Debit', DATE_SUB(NOW(), INTERVAL 310 DAY), DATE_SUB(NOW(), INTERVAL 310 DAY), 'Successful', NULL),
('AS118', 'TRF', 'ACC002', 'ACC001', 110000, 'Debit', DATE_SUB(NOW(), INTERVAL 290 DAY), DATE_SUB(NOW(), INTERVAL 290 DAY), 'Successful', NULL),
('AS119', 'TRF', 'ACC002', 'ACC001', 105000, 'Debit', DATE_SUB(NOW(), INTERVAL 270 DAY), DATE_SUB(NOW(), INTERVAL 270 DAY), 'Successful', NULL),
('AS120', 'TRF', 'ACC002', 'ACC001', 98000,  'Debit', DATE_SUB(NOW(), INTERVAL 240 DAY), DATE_SUB(NOW(), INTERVAL 240 DAY), 'Successful', NULL),
('AS121', 'TRF', 'ACC002', 'ACC001', 102000, 'Debit', DATE_SUB(NOW(), INTERVAL 220 DAY), DATE_SUB(NOW(), INTERVAL 220 DAY), 'Successful', NULL),
('AS122', 'TRF', 'ACC002', 'ACC001', 100000, 'Debit', DATE_SUB(NOW(), INTERVAL 200 DAY), DATE_SUB(NOW(), INTERVAL 200 DAY), 'Successful', NULL),
('AS123', 'TRF', 'ACC002', 'ACC001', 99000,  'Debit', DATE_SUB(NOW(), INTERVAL 180 DAY), DATE_SUB(NOW(), INTERVAL 180 DAY), 'Successful', NULL),
('AS124', 'TRF', 'ACC002', 'ACC001', 97000,  'Debit', DATE_SUB(NOW(), INTERVAL 160 DAY), DATE_SUB(NOW(), INTERVAL 160 DAY), 'Successful', NULL),
('AS125', 'TRF', 'ACC002', 'ACC001', 103000, 'Debit', DATE_SUB(NOW(), INTERVAL 140 DAY), DATE_SUB(NOW(), INTERVAL 140 DAY), 'Successful', NULL),
('AS126', 'TRF', 'ACC002', 'ACC001', 101000, 'Debit', DATE_SUB(NOW(), INTERVAL 120 DAY), DATE_SUB(NOW(), INTERVAL 120 DAY), 'Successful', NULL),
('AS127', 'TRF', 'ACC002', 'ACC001', 95000,  'Debit', DATE_SUB(NOW(), INTERVAL 100 DAY), DATE_SUB(NOW(), INTERVAL 100 DAY), 'Successful', NULL),
('AS128', 'TRF', 'ACC002', 'ACC001', 98000,  'Debit', DATE_SUB(NOW(), INTERVAL 80 DAY), DATE_SUB(NOW(), INTERVAL 80 DAY), 'Successful', NULL),
('AS129', 'TRF', 'ACC002', 'ACC001', 99000,  'Debit', DATE_SUB(NOW(), INTERVAL 60 DAY), DATE_SUB(NOW(), INTERVAL 60 DAY), 'Successful', NULL),
('AS130', 'TRF', 'ACC002', 'ACC001', 96000,  'Debit', DATE_SUB(NOW(), INTERVAL 40 DAY), DATE_SUB(NOW(), INTERVAL 40 DAY), 'Successful', NULL),
('AS131', 'TRF', 'ACC002', 'ACC001', 97000,  'Debit', DATE_SUB(NOW(), INTERVAL 20 DAY), DATE_SUB(NOW(), INTERVAL 20 DAY), 'Successful', NULL);

-- Insert the large spike transactions (these should come after the small ones)
INSERT INTO TRANSACTIONS VALUES
('AS132', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 15 MINUTE), DATE_SUB(NOW(), INTERVAL 15 MINUTE), 'Successful', NULL),
('AS133', 'TRF', 'ACC002', 'ACC001', 3500000, 'Debit', DATE_SUB(NOW(), INTERVAL 12 MINUTE), DATE_SUB(NOW(), INTERVAL 12 MINUTE), 'Successful', NULL),
('AS134', 'TRF', 'ACC002', 'ACC001', 4000000, 'Debit', DATE_SUB(NOW(), INTERVAL 11 MINUTE), DATE_SUB(NOW(), INTERVAL 10 MINUTE), 'Successful', NULL),
('AS135', 'TRF', 'ACC002', 'ACC001', 2500000, 'Debit', DATE_SUB(NOW(), INTERVAL 9 MINUTE), DATE_SUB(NOW(), INTERVAL 8 MINUTE), 'Successful', NULL),
('AS136', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 8 MINUTE), DATE_SUB(NOW(), INTERVAL 5 MINUTE), 'Successful', NULL),
('AS137', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 7 MINUTE), DATE_SUB(NOW(), INTERVAL 3 MINUTE), 'Successful', NULL),
('AS138', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 6 MINUTE), DATE_SUB(NOW(), INTERVAL 2 MINUTE), 'Successful', NULL),
('AS139', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 5 MINUTE), DATE_SUB(NOW(), INTERVAL 5 MINUTE), 'Successful', NULL),
('AS140', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 4 MINUTE), DATE_SUB(NOW(), INTERVAL 3 MINUTE), 'Successful', NULL),
('AS141', 'TRF', 'ACC002', 'ACC001', 3000000, 'Debit', DATE_SUB(NOW(), INTERVAL 2 MINUTE), DATE_SUB(NOW(), INTERVAL 2 MINUTE), 'Successful', NULL);

-- Tạo khách hàng mới
select * from debug_log;

-- Gắn tài khoản với khách hàng
INSERT INTO CUSTOMER_ACCOUNTS (
    cus_account_id, cus_id, cus_account_status, cus_account_type_id
)
VALUES (
    'ACC003', 'CUS001', 'Active', 'C'
);
UPDATE CHECK_ACCOUNTS
SET check_acc_balance = 200000000
    WHERE cus_account_id = "ACC003" ;
INSERT INTO TRANSACTIONS (
    trans_id, trans_type_id, cus_account_id, related_cus_account_id, trans_amount,
    direction, trans_time, last_updated, trans_status
)
VALUES (
    'AS301', 'TRF', 'ACC003', 'ACC001', 100000, 'Debit',
    DATE_SUB(NOW(), INTERVAL 100 DAY), DATE_SUB(NOW(), INTERVAL 100 DAY), 'Successful'
);
INSERT INTO TRANSACTIONS (
    trans_id, trans_type_id, cus_account_id, related_cus_account_id, trans_amount,
    direction, trans_time, last_updated, trans_status
)
VALUES (
    'AS302', 'TRF', 'ACC003', 'ACC001', 80000000, 'Debit',
    NOW(), NOW(), 'Successful'
);
select * from event_log;
select * from suspicions;
select * from transactions;


-- SELECT count(*)
-- FROM SUSPICIONS s
-- JOIN TRANSACTIONS t ON s.trans_id = t.trans_id
-- WHERE t.cus_account_id = 'ACC002'
-- 	AND s.severity_level = 'High'
--     AND s.suspicion_status != 'False_positive';



-- INSERT INTO CHECK_ACCOUNTS VALUES ('DTNBC25000011', 50000000 ,1, 100000, 1000000);
-- INSERT INTO TRANSACTIONS VALUES ('TXN007', 'TRF', 'DTNBC25000011', 'DTNBS25000001', 500000, 'Debit', NOW(), NOW(), 'Successful', NULL);


